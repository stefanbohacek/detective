"strict";function ready(e){"loading"!==document.readyState?e():document.addEventListener("DOMContentLoaded",e)}function productionServer(){return window.location.href.indexOf("fourtonfish.com")>-1}function removeClasses(e){e.className=""}function getEventTarget(e){return e=e||window.event,e.target||e.srcElement}function getRandomInt(e,t){return Math.floor(Math.random()*(t-e+1))+e}window.smoothScroll=function(){if(void 0!==document.querySelectorAll&&void 0!==window.pageYOffset&&void 0!==history.pushState){var e=function(e){return"HTML"===e.nodeName?-window.pageYOffset:e.getBoundingClientRect().top+window.pageYOffset},t=function(e){return.5>e?4*e*e*e:(e-1)*(2*e-2)*(2*e-2)+1},o=function(e,o,n,s){return n>s?o:e+(o-e)*t(n/s)},n=function(t,n,s){n=n||500;var a,r=window.pageYOffset;a="number"==typeof t?parseInt(t):e(t);var i=Date.now(),l=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||function(e){window.setTimeout(e,15)},d=function(){var e=Date.now()-i;window.scroll(0,o(r,a,e,n)),e>n?"function"==typeof s&&s(t):l(d)};d()},s=function(e){e.preventDefault(),n(document.getElementById(this.hash.substring(1)),500,function(){})};return document.addEventListener("DOMContentLoaded",function(){for(var e,t=document.querySelectorAll('a[href^="#"]'),o=t.length;e=t[--o];)e.addEventListener("click",s,!1)}),n}}();var xmlToJSON=function(e){var t=new X2JS,o=t.xml_str2json(e);return o=o.response},userRole,partnerRole="unknown",gameStarted=!1,gameFinished=!1;window.onbeforeunload=function(){return gameFinished===!1?"Are you sure?":void 0},ready(function(){function e(e,t){return e=e.toLowerCase().trim().replace(/ /g,""),t===!0&&(e=e.replace(/[.,?!\s,]/g,"")),e}function t(e){for(var t=0,o=Y.length;o>t;t++)if(new RegExp(Y[t],"gi").test(e.replace(/\W/g,""))===!0)return u("system","ERROR"),u("system","Unable to send message"),!0;return!1}function o(){B.service=c.getAttribute("data-service");var e="Play Detective, a game by @fourtonfish";null!==B.service&&"reddit"===B.service&&(e="[log] TITLE"),B.shareUrl=c.getAttribute("data-url").replace(/DESCRIPTION/,'Detective: A "reverse Turing test" chat game.').replace(/CHATLOGURL/gi,"http://fourtonfish.com/detective/log?id="+B.chatLogId).replace(/SHORTTITLE/,e),B.status.innerHTML="",window.open(B.shareUrl)}function n(){clearTimeout(g),g=setTimeout(function(){i()},getRandomInt(3e4,6e4))}function s(e){if(H.useLessClever===!0&&"..."!==e){e=e.toLowerCase().replace(/^(i )| i /gi," I ").trim();var t=e.replace(/([.?!])\s*(?=[A-Z])/,"$1|").split("|");1===t.length&&(e=e.replace(/\.$/,"")),5===getRandomInt(1,10)&&(e=e.replace(/(')/gi,""))}switch(getRandomInt(1,1e4)){case"1":e=e.replace("ll","l");break;case"2":e=e.replace("ss","s");break;case"3":e=e.replace("l","k");break;case"4":e=e.replace("o","p");break;case"4":e=e.replace("w","s");break;case"5":e=e.replace("s","d")}return e}function a(){C.style.display="block",Array.prototype.forEach.call(document.getElementsByClassName("share-link-shifted"),function(e,t){setTimeout(function(){e.classList.remove("share-link-shifted"),e.classList.add("share-link-unshifted")},10*t*t)})}function r(t){if(-1===H.alreadyAnswered.indexOf(e(t,!0))){"..."!==t&&H.alreadyAnswered.push(e(t,!0));var o=new XMLHttpRequest;o.open("GET","//www.botlibre.com/rest/botlibre/form-chat?instance="+H.id+"&application=155525030417300595&message="+t+(null!==H.conversationID?"&conversation="+H.conversationID:""),!0),o.onload=function(){if(o.status>=200&&o.status<400){var e=xmlToJSON(o.responseText);null===H.conversationID&&(H.conversationID=e._conversation),void 0===e.message?i():new RegExp(D.join("|")).test(e.message)===!0?r(t):l(s(e.message))}},o.onerror=function(){},o.send()}else if(t.indexOf("?")>-1)if(H.alreadyAnsweredResponses.length>0){var n=H.alreadyAnsweredResponses.splice(getRandomInt(0,H.alreadyAnsweredResponses.length-1),1);n=n[0],l(s(n))}else l("...")}function i(){var e=["..."];r(e[getRandomInt(0,e.length-1)])}function l(e){if(e=e.replace(/(RobotNotImpostor(\d)*|Jenny|linh truong|Alice)/gi,H.name),e=e.replace(/ROBOTFROM/gi,H.from),H.pendingResponses.push(e),console.log(H.pendingResponses.length),H.pendingResponses.length>0){var t=H.pendingResponses.shift(),o=t.length,n=o*getRandomInt(50,100)+getRandomInt(2e3,8e3);H.responsePending===!1?(H.responsePending=!0,setTimeout(function(){u("robot",e),H.responsePending=!1},n)):setTimeout(function(){return function(e){l(e)}(e)},1e3)}}function d(e){"unknown"!==partnerRole?(gameFinished=!0,e===partnerRole?(u("system","CORRECT"),m.emit("game over","detective won"),m.emit("I won","detective")):(u("system","INCORRECT"),m.emit("game over","detective lost"),m.emit("I lost","detective")),u("system","Game is over"),a()):(u("system","ERROR"),u("system","Too early to tell"))}function u(t,o){if(0===o.trim().length)return!1;var n=document.createElement("LI");switch(t){case"user":n.classList.add("user-message"),n.classList.add("new-message");break;case"system":switch(n.classList.add("system-message"),o){case"ERROR":case"INCORRECT":n.classList.add("error-message");break;case"CORRECT":n.classList.add("user-correct");break;default:n.classList.add("new-message")}break;case"robot":case"impostor":n.classList.add("rori-message"),n.classList.add("new-message")}var s=e(o,!0);if(s.indexOf("wiggle")>-1&&n.classList.add("wiggle-message"),s.indexOf("jump")>-1&&n.classList.add("jump-message"),n.innerHTML=o.replace(/(<([^>]+)>)/gi,""),"user"!==t&&"system"!==t&&(n.innerHTML='<span class="message-prepend">></span> '+n.innerHTML),"Game is over"===o&&"system"===t&&(n.innerHTML+='. Follow <a href="https://twitter.com/detectivelogs">@detectivelogs</a> for updates!</p>'),"robot"===t&&gameFinished===!0);else switch(O.appendChild(n),e(o,!0)){case"ilikethisgame":u("system","Oh hey, thanks!");break;case"godmode":u("system","Not in this game.")}"user"===t?k.value="":document.hasFocus()||(document.title="New message | Detective by @fourtonfish"),document.body.scrollTop=document.body.scrollHeight,window.scrollTo(0,document.body.scrollHeight),o=e(o,!1),"user"===t&&/you.*re?.*(impostor|imposter|robot|bot)/gi.test(o)&&"detective"===userRole&&gameFinished===!1&&-1===o.indexOf("not")&&(new RegExp(["youarearobot","you'rearobot","youarerobot","yourerobot","yourearobot","you'rerobot","youaretherobot","you'retherobot"].join("|")).test(o)===!0?d("robot"):new RegExp(["youareanimposter","youareanimpostor","you'reanimposter","you'reanimpostor","youareimposter","youareimpostor","you'reimposter","you'reimpostor","youretheimposter","youretheimpostor","youreimposter","youreimpostor","youreanimposter","youreanimpostor","youaretheimposter","youaretheimpostor","you'retheimposter","you'retheimpostor"].join("|")).test(o)===!0?d("impostor"):u("system",'Please say "You are a robot" or "You are an impostor".'))}var c,m,g,h=document.getElementsByClassName("shifted-1"),p=document.getElementsByClassName("shifted"),y=document.getElementById("loading"),f=document.getElementById("you-are"),v=document.getElementById("instructions-wrapper"),w=document.getElementById("instructions"),R=document.getElementById("dismiss-instructions"),b=document.getElementById("more-info"),L=document.getElementById("role-reminder"),E=document.getElementById("message-form"),I=document.getElementById("send-message"),k=document.getElementById("message-text"),T=document.getElementById("messages-wrapper"),O=document.getElementById("messages"),C=document.getElementById("share-chat-log-wrapper"),B=(document.getElementById("what-is-this"),{triggerEl:document.getElementById("share-buttons-game"),service:null,status:document.getElementById("chat-log-url-status"),shareUrl:null,chatLogId:null}),A=["909409"],M=["your mom","not your business","none of your business","Steve","Bob","Lucy","Rita","Cletus","Rufus","Gale","Sidney","Emmie","Ethyl","Babara","Jodie","Karon","Rashida","Olen","Felisa","Nenita","Camille","Shay","Phoebe","Angelique","Monte","Exie","Lucrecia","Melodi","Marge","Zoe","Cassandra","Rosaura","Brendon","Mckinley","Lucie","Shandi","Mao","Vilma","Shara","Giselle","Royal","Dia","Ivy","Sheridan","Kandi","Juliette","Camilla","Susanna","Gary","Gertha","Britany","Marvella","Sina","Lakeesha","Sherill","Toney","Sherri","Albertina","Taren","Hildred","Erma","Lenard","Tyson","Markus","Inez","Letty","Deedra","Tammera","Stanley","Lora","Leon","Belkis","Janae","Lenna","Bronwyn","Kimbery","Debi","Bernie","Alleen","Deloise","Chiquita","Shanelle","Wynona","Kisha","Minna","Laronda","Chaya","Anabel","Leila","Arletha","Loyce","Crysta","Maegan","Valery","Hee","Ed","Mitsuko","Vincenzo","Mercedez","Janeen","Fredrick","Sharda","Dylan","Cassi","Mae","Bobbye","Lanny"],S=["Uh, where are you from?","That's prvivate.","Your mom!","I live right next to you!","...","I'm homeless","I'm homeless?"],D=["beeyotch","biatch","bitch","chinaman","chinamen","chink","crip","cunt","dago","daygo","dego","dick","douchebag","dyke","fag","fatass","fatso","gash","gimp","golliwog","gook","gyp","homo","hooker","jap","kike","kraut","lame","lardass","lesbo","negro","nigga","nigger","paki","pickaninny","pussy","raghead","retard","shemale","skank","slut","spade","spic","spook","tard","tits","titt","trannies","tranny","twat","wetback","whore","wop"],H={id:A[getRandomInt(0,A.length-1)],name:M[getRandomInt(0,M.length-1)],from:S[getRandomInt(0,S.length-1)],conversationID:null,useLessClever:Math.random()<.5?!0:!1,responsePending:!1,pendingResponses:[],alreadyAnswered:[],alreadyAnsweredResponses:["You already asked that question.","You already asked me that.","I think I already told you.","I already told you.","I already answered that.","Did you read my answer?","You already said that.","...","I told you","I literally just told you.","I just told you."]},Y=["n(i|1)+g{2,}((e|3)+r+|a)+","f+a+g+","f+(a|@)+g{2,}(o|0)+t+"],x=setTimeout(function(){gameStarted===!1&&(y.innerHTML="Still waiting...",x=setTimeout(function(){gameStarted===!1&&(y.innerHTML="Looks like nobody's around...",setTimeout(function(){gameFinished=!0,location.reload()},getRandomInt(300,3e3)))},4e4))},15e3);window.addEventListener("focus",function(){void 0!==userRole&&(document.title="You are the "+userRole+" | Detective by @fourtonfish")},!1);var F;F=productionServer()?io(document.location.protocol+"//fourtonfish.com/detective"):io(document.location.protocol+"//"+document.location.host),R&&R.addEventListener("click",function(){"robot"===partnerRole&&n(),v.classList.add("shiftedUp"),E.classList.remove("hidden"),b.classList.remove("hidden"),b.classList.remove("shifted"),k.focus()}),B.triggerEl&&B.triggerEl.addEventListener("click",function(e){switch(e.preventDefault(),c=getEventTarget(e),c.getAttribute("data-url")){case"RELOAD":location.reload();break;default:null===B.shareUrl?(B.status.innerHTML="Loading...",m.emit("save_chat_log",T.innerHTML,userRole)):o()}}),h.length>0&&Array.prototype.forEach.call(h,function(e,t){setTimeout(function(){e.classList.remove("shifted-1"),e.classList.add("unshifted-1")},(200-10*t)*t)}),F.on("connected",function(){m=F}),F.on("chat_log_saved",function(e){B.chatLogId=e,o()}),F.on("error",function(e){console.log("ERROR"),console.log(e)}),F.on("game over",function(e){"detective won"===e?(u("system","YOU HAVE BEEN REVEALED"),m.emit("I lost","impostor")):(u("system","YOU FOOLED THE DETECTIVE"),m.emit("I won","impostor")),u("system","Game is over"),a()}),F.on("partner disconnected",function(e){u("system","Partner disconnected."),a(),"unknown"!==partnerRole&&"detective"===userRole&&gameFinished===!1&&u("system","You were speaking with the "+partnerRole.toUpperCase()+".")}),F.on("you are",function(e){gameStarted=!0,clearTimeout(x),userRole=e,y.classList.add("shiftedUp");var t=document.getElementsByClassName("unshifted-1");t.length>0&&Array.prototype.forEach.call(t,function(e,t){setTimeout(function(){e.classList.remove("unshifted-1"),e.classList.add("shiftedUp1")},(200-10*t)*t)}),p.length>0&&Array.prototype.forEach.call(p,function(e,t){setTimeout(function(){e.classList.remove("shifted"),e.classList.add("unshifted")},(200-10*t)*t)}),R.focus(),document.title="You are the "+userRole+" | Detective by @fourtonfish",L.innerHTML='the <span class="highlight">'+userRole+"</span>",f.innerHTML='You are the <span class="highlight">'+userRole+"</span>",w.innerHTML="detective"===userRole?'<p>You must figure out whether you are speaking to a <span class="highlight">ROBOT</span>* or an <span class="highlight">IMPOSTOR</span>, another player pretending to be a <span class="highlight">ROBOT</span>*.</p><p>Say <em>"You are an impostor"</em> or <em>"You are a robot"</em> once you are confident with your choice.</p><p class="definition">*A <a href="http://en.wikipedia.org/wiki/Chatbot" target="_blank">chatter robot</a> is a type of conversational agent, a computer program designed to simulate an intelligent conversation with one or more human users via auditory or textual methods.</p>':'<p>You must convince the <span class="highlight">DETECTIVE</span> that he or she is speaking to a <span class="highlight">ROBOT</span>*.</p><p class="definition">*A <a href="http://en.wikipedia.org/wiki/Chatbot" target="_blank">chatter robot</a> is a type of conversational agent, a computer program designed to simulate an intelligent conversation with one or more human users via auditory or textual methods.</p>'}),F.on("paired",function(o){"robot"===o.users[0]||"robot"===o.users[1]?(partnerRole="robot",I.addEventListener("click",function(o){o.preventDefault(),t(e(k.value,!0))===!1&&(n(),gameFinished===!1?(r(k.value),u("user",k.value)):alert("Let's give the robot some rest."))})):(partnerRole="detective"===userRole?"impostor":"detective",I.addEventListener("click",function(o){o.preventDefault(),t(e(k.value,!0))===!1&&(F.emit("send message",{from:userRole,message:k.value}),u("user",k.value))}))}),F.on("message received",function(e){"unknown"===partnerRole&&(partnerRole=e.from),e.from!==userRole&&u(partnerRole,e.message)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuMS4xMy5taW4uanMiXSwibmFtZXMiOlsicmVhZHkiLCJmbiIsImRvY3VtZW50IiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJwcm9kdWN0aW9uU2VydmVyIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwiaW5kZXhPZiIsInJlbW92ZUNsYXNzZXMiLCJlbCIsImNsYXNzTmFtZSIsImdldEV2ZW50VGFyZ2V0IiwiZSIsImV2ZW50IiwidGFyZ2V0Iiwic3JjRWxlbWVudCIsImdldFJhbmRvbUludCIsIm1pbiIsIm1heCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInNtb290aFNjcm9sbCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJwYWdlWU9mZnNldCIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJnZXRUb3AiLCJlbGVtZW50Iiwibm9kZU5hbWUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0b3AiLCJlYXNlSW5PdXRDdWJpYyIsInQiLCJwb3NpdGlvbiIsInN0YXJ0IiwiZW5kIiwiZWxhcHNlZCIsImR1cmF0aW9uIiwiY2FsbGJhY2siLCJwYXJzZUludCIsImNsb2NrIiwiRGF0ZSIsIm5vdyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNldFRpbWVvdXQiLCJzdGVwIiwic2Nyb2xsIiwibGlua0hhbmRsZXIiLCJldiIsInByZXZlbnREZWZhdWx0IiwiZ2V0RWxlbWVudEJ5SWQiLCJ0aGlzIiwiaGFzaCIsInN1YnN0cmluZyIsImEiLCJpbnRlcm5hbCIsImkiLCJsZW5ndGgiLCJ4bWxUb0pTT04iLCJ4bWxWYWx1ZSIsIngyanMiLCJYMkpTIiwianNvblZhbHVlIiwieG1sX3N0cjJqc29uIiwicmVzcG9uc2UiLCJ1c2VyUm9sZSIsInBhcnRuZXJSb2xlIiwiZ2FtZVN0YXJ0ZWQiLCJnYW1lRmluaXNoZWQiLCJvbmJlZm9yZXVubG9hZCIsImNsZWFyVGV4dCIsInRleHQiLCJyZW1vdmVQdW5jdHVhdGlvbiIsInRvTG93ZXJDYXNlIiwidHJpbSIsInJlcGxhY2UiLCJjb250YWluc09mZmVuc2l2ZUxhbmd1YWdlIiwiaiIsIm9mZmVuc2l2ZVdvcmRzIiwiUmVnRXhwIiwidGVzdCIsImFkZE1lc3NhZ2UiLCJzaGFyZUNoYXRMb2ciLCJzaGFyZUNoYXRMb2dNb2R1bGUiLCJzZXJ2aWNlIiwic2hhcmVUYXJnZXQiLCJnZXRBdHRyaWJ1dGUiLCJzaGFyZVRpdGxlIiwic2hhcmVVcmwiLCJjaGF0TG9nSWQiLCJzdGF0dXMiLCJpbm5lckhUTUwiLCJvcGVuIiwicmVzdGFydEdsb2JhbFRpbWVyIiwiY2xlYXJUaW1lb3V0IiwiZ2xvYmFsVGltZXIiLCJwb2tlVGhlUm9ib3QiLCJsZXNzQ2xldmVyIiwicm9ib3QiLCJ1c2VMZXNzQ2xldmVyIiwidGVtcCIsInNwbGl0Iiwic2hvd1NoYXJpbmdCdXR0b25zIiwic2hhcmVDaGF0TG9nV3JhcHBlciIsInN0eWxlIiwiZGlzcGxheSIsIkFycmF5IiwicHJvdG90eXBlIiwiZm9yRWFjaCIsImNhbGwiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiaW5kZXgiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJjb250YWN0VGhlUm9ib3QiLCJtZXNzYWdlIiwiYWxyZWFkeUFuc3dlcmVkIiwicHVzaCIsInJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsImlkIiwiY29udmVyc2F0aW9uSUQiLCJvbmxvYWQiLCJyZXNwIiwicmVzcG9uc2VUZXh0IiwiX2NvbnZlcnNhdGlvbiIsInVuZGVmaW5lZCIsImJhZFdvcmRzIiwiam9pbiIsInJvYm90UmVzcG9uZCIsIm9uZXJyb3IiLCJzZW5kIiwiYWxyZWFkeUFuc3dlcmVkUmVzcG9uc2VzIiwiYW5ub3llZE1lc3NhZ2UiLCJzcGxpY2UiLCJzZW5kVGV4dCIsIm5hbWUiLCJmcm9tIiwicGVuZGluZ1Jlc3BvbnNlcyIsImNvbnNvbGUiLCJsb2ciLCJuZXh0TWVzc2FnZSIsInNoaWZ0IiwibmV4dE1lc3NhZ2VMZW5ndGgiLCJuZXh0TWVzc2FnZURlbGF5IiwicmVzcG9uc2VQZW5kaW5nIiwicmV2ZWFsSW1wb3N0b3IiLCJkZXRlY3RpdmVHdWVzcyIsImdsb2JhbFNvY2tldCIsImVtaXQiLCJtZXNzYWdlRnJvbSIsIm1lc3NhZ2VUZXh0IiwibmV3TWVzc2FnZSIsImNyZWF0ZUVsZW1lbnQiLCJmdW5TdHVmZiIsIm1lc3NhZ2VzIiwiYXBwZW5kQ2hpbGQiLCJtZXNzYWdlVGV4dElucHV0IiwidmFsdWUiLCJoYXNGb2N1cyIsInRpdGxlIiwiYm9keSIsInNjcm9sbFRvcCIsInNjcm9sbEhlaWdodCIsInNjcm9sbFRvIiwic2hpZnRlZEVsczEiLCJzaGlmdGVkRWxzIiwibG9hZGluZ0luZGljYXRvciIsInlvdUFyZSIsImluc3RydWN0aW9uc1dyYXBwZXIiLCJpbnN0cnVjdGlvbnMiLCJkaXNtaXNzSW5zdHJ1Y3Rpb25zQnV0dG9uIiwibW9yZUluZm8iLCJyb2xlUmVtaW5kZXIiLCJtZXNzYWdlRm9ybSIsInNlbmRNZXNzYWdlQnV0dG9uIiwibWVzc2FnZXNXcmFwcGVyIiwidHJpZ2dlckVsIiwicm9ib3RJRHMiLCJuYW1lcyIsInBsYWNlc1ByaXZhdGUiLCJnbG9iYWxUaW1lcldhaXRpbmciLCJyZWxvYWQiLCJzb2NrZXQiLCJpbyIsInByb3RvY29sIiwiaG9zdCIsImZvY3VzIiwib24iLCJkYXRhIiwidG9VcHBlckNhc2UiLCJ1bnNoaWZ0ZWRFbHMxIiwidXNlcnMiLCJhbGVydCJdLCJtYXBwaW5ncyI6IkFBQUEsUUFrRUEsU0FBU0EsT0FBTUMsR0FDZSxZQUF4QkMsU0FBU0MsV0FDWEYsSUFFQUMsU0FBU0UsaUJBQWlCLG1CQUFvQkgsR0FJbEQsUUFBU0ksb0JBQ1AsTUFBUUMsUUFBT0MsU0FBU0MsS0FBS0MsUUFBUSxtQkFBcUIsR0FHNUQsUUFBU0MsZUFBY0MsR0FDckJBLEVBQUdDLFVBQVksR0FJakIsUUFBU0MsZ0JBQWVDLEdBRXRCLE1BREFBLEdBQUlBLEdB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QkFDQSxRQUNBLE1BQ0EsT0FDQSxPQUNBLFNBQ0EsUUFDQSxPQUNBLFNBQ0EsUUFDQSxRQUNBLFNBQ0EsUUFDQSxRQUNBLFVBQ0EsT0FDQSxTQUNBLFNBQ0EsVUFDQSxPQUNBLFNBQ0EsWUFDQSxRQUNBLE9BQ0EsV0FDQSxTQUNBLFFBQ0EsTUFDQSxZQUNBLFVBQ0EsVUFDQSxXQUNBLFFBQ0EsU0FDQSxNQUNBLFFBQ0EsUUFDQSxVQUNBLFFBQ0EsTUFDQSxNQUNBLFdBQ0EsUUFDQSxXQUNBLFVBQ0EsVUFDQSxPQUNBLFNBQ0EsVUFDQSxXQUNBLE9BQ0EsV0FDQSxVQUNBLFFBQ0EsU0FDQSxZQUNBLFFBQ0EsVUFDQSxPQUNBLFNBQ0EsUUFDQSxTQUNBLE9BQ0EsUUFDQSxTQUNBLFVBQ0EsVUFDQSxPQUNBLE9BQ0EsU0FDQSxRQUNBLFFBQ0EsVUFDQSxVQUNBLE9BQ0EsU0FDQSxTQUNBLFVBQ0EsV0FDQSxXQUNBLFNBQ0EsUUFDQSxRQUNBLFVBQ0EsUUFDQSxTQUNBLFFBQ0EsVUFDQSxRQUNBLFNBQ0EsU0FDQSxTQUNBLE1BQ0EsS0FDQSxVQUNBLFdBQ0EsV0FDQSxTQUNBLFdBQ0EsU0FDQSxRQUNBLFFBQ0EsTUFDQSxTQUNBLFNBT0ZDLEdBQ0EsMEJBQ0EsbUJBQ0EsWUFDQSw0QkFDQSxNQUNBLGVBQ0EsaUJBRUFyRCxHQUlFLFdBQ0EsU0FDQSxRQUNBLFdBQ0EsV0FDQSxRQUNBLE9BQ0EsT0FDQSxPQUNBLFFBQ0EsT0FDQSxPQUNBLFlBQ0EsT0FDQSxNQUNBLFNBQ0EsUUFDQSxPQUNBLE9BQ0EsV0FDQSxPQUNBLE1BQ0EsT0FDQSxTQUNBLE1BQ0EsT0FDQSxRQUNBLE9BQ0EsVUFDQSxRQUNBLFFBQ0EsUUFDQSxTQUNBLE9BQ0EsYUFDQSxRQUNBLFVBQ0EsU0FDQSxVQUNBLFFBQ0EsT0FDQSxRQUNBLE9BQ0EsUUFDQSxPQUNBLE9BQ0EsT0FDQSxXQUNBLFNBQ0EsT0FDQSxVQUNBLFFBQ0EsT0FFRjlCLEdBQ0V1QixHQUFJMEQsRUFBU3RLLGFBQWEsRUFBR3NLLEVBQVMxSCxPQUFTLElBQy9DZ0YsS0FB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RUFBaUJDLFFBRzlCOUUsRUFBVyxPQUFRNkUsRUFBaUJDLGFBTzVDeUIsRUFBT0ssR0FBRyxtQkFBb0IsU0FBU0MsR0FDakIsWUFBaEI1SCxjQUNGQSxZQUFjNEgsRUFBS3BELE1BRWpCb0QsRUFBS3BELE9BQVN6RSxVQUNoQmdCLEVBQVdmLFlBQWE0SCxFQUFLMUUiLCJmaWxlIjoic2NyaXB0cy4xLjEzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwic3RyaWN0XCI7XG4vKlxuICBodHRwczovL2dpdGh1Yi5jb20vYWxpY2VsaWV1dGllci9zbW9vdGhTY3JvbGxcbiovXG53aW5kb3cuc21vb3RoU2Nyb2xsID0gKGZ1bmN0aW9uKCl7XG5pZihkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsID09PSB2b2lkIDAgfHwgd2luZG93LnBhZ2VZT2Zmc2V0ID09PSB2b2lkIDAgfHwgaGlzdG9yeS5wdXNoU3RhdGUgPT09IHZvaWQgMCkgeyByZXR1cm47IH1cbnZhciBnZXRUb3AgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgaWYoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKXtcbiAgICAgIHJldHVybiAtd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgIH0gXG4gICAgcmV0dXJuIGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0O1xufTtcbnZhciBlYXNlSW5PdXRDdWJpYyA9IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0PDAuNSA/IDQqdCp0KnQgOiAodC0xKSooMip0LTIpKigyKnQtMikrMTsgfTtcbnZhciBwb3NpdGlvbiA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIGVsYXBzZWQsIGR1cmF0aW9uKSB7XG4gICAgaWYgKGVsYXBzZWQgPiBkdXJhdGlvbil7XG4gICAgICByZXR1cm4gZW5kO1xuICAgIH0gXG4gICAgcmV0dXJuIHN0YXJ0ICsgKGVuZCAtIHN0YXJ0KSAqIGVhc2VJbk91dEN1YmljKGVsYXBzZWQgLyBkdXJhdGlvbik7XG59O1xudmFyIHNtb290aFNjcm9sbCA9IGZ1bmN0aW9uKGVsLCBkdXJhdGlvbiwgY2FsbGJhY2spe1xuICAgIGR1cmF0aW9uID0gZHVyYXRpb24gfHwgNTAwO1xuICAgIHZhciBzdGFydCA9IHdpbmRvdy5wYWdlWU9mZnNldCxcbiAgICAgICAgZW5kO1xuICAgIGlmICh0eXBlb2YgZWwgPT09ICdudW1iZXInKSB7XG4gICAgICBlbmQgPSBwYXJzZUludChlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVuZCA9IGdldFRvcChlbCk7XG4gICAgfVxuICAgIHZhciBjbG9jayA9IERhdGUubm93KCk7XG4gICAgdmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgIGZ1bmN0aW9uKGZuKXt3aW5kb3cuc2V0VGltZW91dChmbiwgMTUpO307XG4gICAgdmFyIHN0ZXAgPSBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgZWxhcHNlZCA9IERhdGUubm93KCkgLSBjbG9jaztcbiAgICAgICAgd2luZG93LnNjcm9sbCgwLCBwb3NpdGlvbihzdGFydCwgZW5kLCBlbGFwc2VkLCBkdXJhdGlvbikpO1xuICAgICAgICBpZiAoZWxhcHNlZCA+IGR1cmF0aW9uKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBzdGVwKCk7XG59O1xudmFyIGxpbmtIYW5kbGVyID0gZnVuY3Rpb24oZXYpIHtcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHNtb290aFNjcm9sbChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmhhc2guc3Vic3RyaW5nKDEpKSwgNTAwLCBmdW5jdGlvbihlbCkge1xuICAgIH0pO1xufTtcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW50ZXJuYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdhW2hyZWZePVwiI1wiXScpLCBhO1xuICAgIGZvcih2YXIgaT1pbnRlcm5hbC5sZW5ndGg7IGE9aW50ZXJuYWxbLS1pXTspe1xuICAgICAgICBhLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBsaW5rSGFuZGxlciwgZmFsc2UpO1xuICAgIH1cbn0pO1xucmV0dXJuIHNtb290aFNjcm9sbDtcbn0pKCk7XG5cbnZhciB4bWxUb0pTT04gPSBmdW5jdGlvbih4bWxWYWx1ZSkge1xuICB2YXIgeDJqcyA9IG5ldyBYMkpTKCksXG4gICAgICBqc29uVmFsdWUgPSB4MmpzLnhtbF9zdHIyanNvbih4bWxWYWx1ZSk7XG4gIGpzb25WYWx1ZSA9IGpzb25WYWx1ZS5yZXNwb25zZTtcbiAgcmV0dXJuIGpzb25WYWx1ZTtcbn07XG5cbmZ1bmN0aW9uIHJlYWR5KGZuKSB7XG4gIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlICE9PSAnbG9hZGluZycpe1xuICAgIGZuKCk7XG4gIH0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9kdWN0aW9uU2VydmVyKCl7XG4gIHJldHVybiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignZm91cnRvbmZpc2guY29tJykgPiAtMSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzZXMoZWwpe1xuICBlbC5jbGFzc05hbWUgPSAnJztcbn1cblxuLy9odHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzUxMTY5MjkvZ2V0LWNsaWNrZWQtbGktZnJvbS11bC1vbmNsaWNrXG5mdW5jdGlvbiBnZXRFdmVudFRhcmdldChlKSB7XG4gIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcbiAgcmV0dXJuIGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDsgXG59XG5cbi8vaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNTI3ODAzL2dlbmVyYXRpbmctcmFuZG9tLW51bWJlcnMtaW4tamF2YXNjcmlwdC1pbi1hLXNwZWNpZmljLXJhbmdlXG5mdW5jdGlvbiBnZXRSYW5kb21JbnQobWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XG59XG5cbnZhciB1c2VyUm9sZSwgLy8gcm9ib3Qgb3IgaW1wb3N0b3JcbiAgICBwYXJ0bmVyUm9sZSA9ICd1bmtub3duJyxcbiAgICBnYW1lU3RhcnRlZCA9IGZhbHNlLFxuICAgIGdhbWVGaW5pc2hlZCA9IGZhbHNlO1xuXG5cbndpbmRvdy5vbmJlZm9yZXVubG9hZCA9IGZ1bmN0aW9uKGUpIHtcbiAgaWYgKGdhbWVGaW5pc2hlZCA9PT0gZmFsc2Upe1xuICAgIHJldHVybiAnQXJlIHlvdSBzdXJlPyc7XG4gIH1cbn07XG5cblxucmVhZHkoZnVuY3Rpb24oKXtcbiAgdmFyIHNoaWZ0ZWRFbHMxID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2hpZnRlZC0xJyksXG4gICAgICBzaGlmdGVkRWxzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2hpZnRlZCcpLFxuICAgICAgbG9hZGluZ0luZGljYXRvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2FkaW5nJyksXG4gICAgICB5b3VBcmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgneW91LWFyZScpLFxuICAgICAgaW5zdHJ1Y3Rpb25zV3JhcHBlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnN0cnVjdGlvbnMtd3JhcHBlcicpLFxuICAgICAgaW5zdHJ1Y3Rpb25zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luc3RydWN0aW9ucycpLFxuICAgICAgZGlzbWlzc0luc3RydWN0aW9uc0J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkaXNtaXNzLWluc3RydWN0aW9ucycpLFxuICAgICAgbW9yZUluZm8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9yZS1pbmZvJyksXG4gICAgICByb2xlUmVtaW5kZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9sZS1yZW1pbmRlcicpLFxuICAgICAgbWVzc2FnZUZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVzc2FnZS1mb3JtJyksXG4gICAgICBzZW5kTWVzc2FnZUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZW5kLW1lc3NhZ2UnKSxcbiAgICAgIG1lc3NhZ2VUZXh0SW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVzc2FnZS10ZXh0JyksXG4gICAgICBtZXNzYWdlc1dyYXBwZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVzc2FnZXMtd3JhcHBlcicpLFxuICAgICAgbWVzc2FnZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVzc2FnZXMnKSxcbiAgICAgIHNoYXJlQ2hhdExvZ1dyYXBwZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2hhcmUtY2hhdC1sb2ctd3JhcHBlcicpLFxuICAgICAgd2hhdElzVGhpc0xpbmsgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2hhdC1pcy10aGlzJyksXG4vLyAgICAgIHJlcXVlc3ROb3RpZmljYXRpb25QZXJtaXNzaW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlcXVlc3Qtbm90aWZpY2F0aW9uLXBlcm1pc3Npb24nKSxcbiAgICAgIHNoYXJlQ2hhdExvZ01vZHVsZSA9IHtcbiAgICAgICAgdHJpZ2dlckVsOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2hhcmUtYnV0dG9ucy1nYW1lJyksXG4gICAgICAgIHNlcnZpY2U6IG51bGwsXG4gICAgICAgIHN0YXR1czogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYXQtbG9nLXVybC1zdGF0dXMnKSxcbiAgICAgICAgc2hhcmVVcmw6IG51bGwsXG4gICAgICAgIGNoYXRMb2dJZDogbnVsbFxuICAgICAgfSxcbiAgICAgIHJvYm90SURzID0gW1xuICAgICAgICAvLyAnMzcnLFxuICAgICAgICAnOTA5NDA5J1xuICAgICAgXSxcbiAgICAgIG5hbWVzID0gW1xuICAgICAgICAneW91ciBtb20nLFxuICAgICAgICAnbm90IHlvdXIgYnVzaW5lc3MnLFxuICAgICAgICAnbm9uZSBvZiB5b3VyIGJ1c2luZXNzJyxcbiAgICAgICAgJ1N0ZXZlJyxcbiAgICAgICAgJ0JvYicsXG4gICAgICAgICdMdWN5JyxcbiAgICAgICAgJ1JpdGEnLFxuICAgICAgICAnQ2xldHVzJywgwqBcbiAgICAgICAgJ1J1ZnVzJywgwqBcbiAgICAgICAgJ0dhbGUnLCDCoFxuICAgICAgICAnU2lkbmV5JywgwqBcbiAgICAgICAgJ0VtbWllJywgwqBcbiAgICAgICAgJ0V0aHlsJywgwqBcbiAgICAgICAgJ0JhYmFyYScsIMKgXG4gICAgICAgICdKb2RpZScsIMKgXG4gICAgICAgICdLYXJvbicsIMKgXG4gICAgICAgICdSYXNoaWRhJywgwqBcbiAgICAgICAgJ09sZW4nLCDCoFxuICAgICAgICAnRmVsaXNhJywgwqBcbiAgICAgICAgJ05lbml0YScsIMKgXG4gICAgICAgICdDYW1pbGxlJywgwqBcbiAgICAgICAgJ1NoYXknLCDCoFxuICAgICAgICAnUGhvZWJlJywgwqBcbiAgICAgICAgJ0FuZ2VsaXF1ZScsIMKgXG4gICAgICAgICdNb250ZScsIMKgXG4gICAgICAgICdFeGllJywgwqBcbiAgICAgICAgJ0x1Y3JlY2lhJywgwqBcbiAgICAgICAgJ01lbG9kaScsIMKgXG4gICAgICAgICdNYXJnZScsIMKgXG4gICAgICAgICdab2UnLCDCoFxuICAgICAgICAnQ2Fzc2FuZHJhJywgwqBcbiAgICAgICAgJ1Jvc2F1cmEnLCDCoFxuICAgICAgICAnQnJlbmRvbicsIMKgXG4gICAgICAgICdNY2tpbmxleScsIMKgXG4gICAgICAgICdMdWNpZScsIMKgXG4gICAgICAgICdTaGFuZGknLCDCoFxuICAgICAgICAnTWFvJywgwqBcbiAgICAgICAgJ1ZpbG1hJywgwqBcbiAgICAgICAgJ1NoYXJhJywgwqBcbiAgICAgICAgJ0dpc2VsbGUnLCDCoFxuICAgICAgICAnUm95YWwnLCDCoFxuICAgICAgICAnRGlhJywgwqBcbiAgICAgICAgJ0l2eScsIMKgXG4gICAgICAgICdTaGVyaWRhbicsIMKgXG4gICAgICAgICdLYW5kaScsIMKgXG4gICAgICAgICdKdWxpZXR0ZScsIMKgXG4gICAgICAgICdDYW1pbGxhJywgwqBcbiAgICAgICAgJ1N1c2FubmEnLCDCoFxuICAgICAgICAnR2FyeScsIMKgXG4gICAgICAgICdHZXJ0aGEnLCDCoFxuICAgICAgICAnQnJpdGFueScsIMKgXG4gICAgICAgICdNYXJ2ZWxsYScsIMKgXG4gICAgICAgICdTaW5hJywgwqBcbiAgICAgICAgJ0xha2Vlc2hhJywgwqBcbiAgICAgICAgJ1NoZXJpbGwnLCDCoFxuICAgICAgICAnVG9uZXknLCDCoFxuICAgICAgICAnU2hlcnJpJyxcbiAgICAgICAgJ0FsYmVydGluYScsIMKgXG4gICAgICAgICdUYXJlbicsIMKgXG4gICAgICAgICdIaWxkcmVkJywgwqBcbiAgICAgICAgJ0VybWEnLCDCoFxuICAgICAgICAnTGVuYXJkJywgwqBcbiAgICAgICAgJ1R5c29uJywgwqBcbiAgICAgICAgJ01hcmt1cycsIMKgXG4gICAgICAgICdJbmV6JywgwqBcbiAgICAgICAgJ0xldHR5JywgwqBcbiAgICAgICAgJ0RlZWRyYScsIMKgXG4gICAgICAgICdUYW1tZXJhJywgwqBcbiAgICAgICAgJ1N0YW5sZXknLCDCoFxuICAgICAgICAnTG9yYScsIMKgXG4gICAgICAgICdMZW9uJywgwqBcbiAgICAgICAgJ0JlbGtpcycsIMKgXG4gICAgICAgICdKYW5hZScsIMKgXG4gICAgICAgICdMZW5uYScsIMKgXG4gICAgICAgICdCcm9ud3luJywgwqBcbiAgICAgICAgJ0tpbWJlcnknLCDCoFxuICAgICAgICAnRGViaScsIMKgXG4gICAgICAgICdCZXJuaWUnLCDCoFxuICAgICAgICAnQWxsZWVuJywgwqBcbiAgICAgICAgJ0RlbG9pc2UnLCDCoFxuICAgICAgICAnQ2hpcXVpdGEnLCDCoFxuICAgICAgICAnU2hhbmVsbGUnLCDCoFxuICAgICAgICAnV3lub25hJywgwqBcbiAgICAgICAgJ0tpc2hhJywgwqBcbiAgICAgICAgJ01pbm5hJywgwqBcbiAgICAgICAgJ0xhcm9uZGEnLCDCoFxuICAgICAgICAnQ2hheWEnLCDCoFxuICAgICAgICAnQW5hYmVsJywgwqBcbiAgICAgICAgJ0xlaWxhJywgwqBcbiAgICAgICAgJ0FybGV0aGEnLCDCoFxuICAgICAgICAnTG95Y2UnLCDCoFxuICAgICAgICAnQ3J5c3RhJywgwqBcbiAgICAgICAgJ01hZWdhbicsIMKgXG4gICAgICAgICdWYWxlcnknLCDCoFxuICAgICAgICAnSGVlJywgwqBcbiAgICAgICAgJ0VkJywgwqBcbiAgICAgICAgJ01pdHN1a28nLCDCoFxuICAgICAgICAnVmluY2Vuem8nLCDCoFxuICAgICAgICAnTWVyY2VkZXonLCDCoFxuICAgICAgICAnSmFuZWVuJywgwqBcbiAgICAgICAgJ0ZyZWRyaWNrJywgwqBcbiAgICAgICAgJ1NoYXJkYScsIMKgXG4gICAgICAgICdEeWxhbicsIMKgXG4gICAgICAgICdDYXNzaScsIMKgXG4gICAgICAgICdNYWUnLCDCoFxuICAgICAgICAnQm9iYnllJywgwqBcbiAgICAgICAgJ0xhbm55JyAgIFxuICAgICAgXSxcbiAgICAgIHBsYWNlcyA9IFtcbiAgICAgICdSb2JvdCBmYWN0b3J5JyxcbiAgICAgICdOZXcgWW9yaycsXG4gICAgICAnQnJvb2tseW4nXG4gICAgICBdLFxuICAgICAgcGxhY2VzUHJpdmF0ZSA9IFtcbiAgICAgICdVaCwgd2hlcmUgYXJlIHlvdSBmcm9tPycsXG4gICAgICAnVGhhdFxcJ3MgcHJ2aXZhdGUuJyxcbiAgICAgICdZb3VyIG1vbSEnLFxuICAgICAgJ0kgbGl2ZSByaWdodCBuZXh0IHRvIHlvdSEnLFxuICAgICAgJy4uLicsXG4gICAgICAnSVxcJ20gaG9tZWxlc3MnLFxuICAgICAgJ0lcXCdtIGhvbWVsZXNzPydcbiAgICAgIF0sXG4gICAgICBiYWRXb3JkcyA9IFtcbi8qXG4gICAgICBJbXBvcnRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9kYXJpdXNrL3dvcmRmaWx0ZXIuXG4qLyAgICAgIFxuICAgICAgICBcImJlZXlvdGNoXCIsXG4gICAgICAgIFwiYmlhdGNoXCIsXG4gICAgICAgIFwiYml0Y2hcIixcbiAgICAgICAgXCJjaGluYW1hblwiLFxuICAgICAgICBcImNoaW5hbWVuXCIsXG4gICAgICAgIFwiY2hpbmtcIixcbiAgICAgICAgXCJjcmlwXCIsXG4gICAgICAgIFwiY3VudFwiLFxuICAgICAgICBcImRhZ29cIixcbiAgICAgICAgXCJkYXlnb1wiLFxuICAgICAgICBcImRlZ29cIixcbiAgICAgICAgXCJkaWNrXCIsXG4gICAgICAgIFwiZG91Y2hlYmFnXCIsXG4gICAgICAgIFwiZHlrZVwiLFxuICAgICAgICBcImZhZ1wiLFxuICAgICAgICBcImZhdGFzc1wiLFxuICAgICAgICBcImZhdHNvXCIsXG4gICAgICAgIFwiZ2FzaFwiLFxuICAgICAgICBcImdpbXBcIixcbiAgICAgICAgXCJnb2xsaXdvZ1wiLFxuICAgICAgICBcImdvb2tcIixcbiAgICAgICAgXCJneXBcIixcbiAgICAgICAgXCJob21vXCIsXG4gICAgICAgIFwiaG9va2VyXCIsXG4gICAgICAgIFwiamFwXCIsXG4gICAgICAgIFwia2lrZVwiLFxuICAgICAgICBcImtyYXV0XCIsXG4gICAgICAgIFwibGFtZVwiLFxuICAgICAgICBcImxhcmRhc3NcIixcbiAgICAgICAgXCJsZXNib1wiLFxuICAgICAgICBcIm5lZ3JvXCIsXG4gICAgICAgIFwibmlnZ2FcIixcbiAgICAgICAgXCJuaWdnZXJcIixcbiAgICAgICAgXCJwYWtpXCIsXG4gICAgICAgIFwicGlja2FuaW5ueVwiLFxuICAgICAgICBcInB1c3N5XCIsXG4gICAgICAgIFwicmFnaGVhZFwiLFxuICAgICAgICBcInJldGFyZFwiLFxuICAgICAgICBcInNoZW1hbGVcIixcbiAgICAgICAgXCJza2Fua1wiLFxuICAgICAgICBcInNsdXRcIixcbiAgICAgICAgXCJzcGFkZVwiLFxuICAgICAgICBcInNwaWNcIixcbiAgICAgICAgXCJzcG9va1wiLFxuICAgICAgICBcInRhcmRcIixcbiAgICAgICAgXCJ0aXRzXCIsXG4gICAgICAgIFwidGl0dFwiLFxuICAgICAgICBcInRyYW5uaWVzXCIsXG4gICAgICAgIFwidHJhbm55XCIsXG4gICAgICAgIFwidHdhdFwiLFxuICAgICAgICBcIndldGJhY2tcIixcbiAgICAgICAgXCJ3aG9yZVwiLFxuICAgICAgICBcIndvcFwiXG4gICAgICBdLFxuICAgICAgcm9ib3QgPSB7XG4gICAgICAgIGlkOiByb2JvdElEc1tnZXRSYW5kb21JbnQoMCwgcm9ib3RJRHMubGVuZ3RoIC0gMSldLFxuICAgICAgICBuYW1lOiBuYW1lc1tnZXRSYW5kb21JbnQoMCwgbmFtZXMubGVuZ3RoIC0gMSldLFxuICAgICAgICBmcm9tOiBwbGFjZXNQcml2YXRlW2dldFJhbmRvbUludCgwLCBwbGFjZXNQcml2YXRlLmxlbmd0aCAtIDEpXSxcbiAgICAgICAgY29udmVyc2F0aW9uSUQ6IG51bGwsXG4gICAgICAgIHVzZUxlc3NDbGV2ZXI6IE1hdGgucmFuZG9tKCkgPCAwLjUgPyB0cnVlIDogZmFsc2UsXG4gICAgICAgIHJlc3BvbnNlUGVuZGluZzogZmFsc2UsXG4gICAgICAgIHBlbmRpbmdSZXNwb25zZXM6IFtdLFxuICAgICAgICBhbHJlYWR5QW5zd2VyZWQ6IFtdLFxuICAgICAgICBhbHJlYWR5QW5zd2VyZWRSZXNwb25zZXM6IFtcbiAgICAgICAgICAnWW91IGFscmVhZHkgYXNrZWQgdGhhdCBxdWVzdGlvbi4nLFxuICAgICAgICAgICdZb3UgYWxyZWFkeSBhc2tlZCBtZSB0aGF0LicsXG4gICAgICAgICAgJ0kgdGhpbmsgSSBhbHJlYWR5IHRvbGQgeW91LicsXG4gICAgICAgICAgJ0kgYWxyZWFkeSB0b2xkIHlvdS4nLFxuICAgICAgICAgICdJIGFscmVhZHkgYW5zd2VyZWQgdGhhdC4nLFxuICAgICAgICAgICdEaWQgeW91IHJlYWQgbXkgYW5zd2VyPycsXG4gICAgICAgICAgJ1lvdSBhbHJlYWR5IHNhaWQgdGhhdC4nLFxuICAgICAgICAgICcuLi4nLFxuICAgICAgICAgICdJIHRvbGQgeW91JyxcbiAgICAgICAgICAnSSBsaXRlcmFsbHkganVzdCB0b2xkIHlvdS4nLFxuICAgICAgICAgICdJIGp1c3QgdG9sZCB5b3UuJ1xuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgb2ZmZW5zaXZlV29yZHMgPSBbXG4gICAgICAgICduKGl8MSkrZ3syLH0oKGV8Mykrcit8YSkrJyxcbiAgICAgICAgJ2YrYStnKycsXG4gICAgICAgICdmKyhhfEApK2d7Mix9KG98MCkrdCsnXG4gICAgICBdLFxuICAgICAgc2hhcmVUYXJnZXQsXG4gICAgICBnbG9iYWxTb2NrZXQsXG4gICAgICBnbG9iYWxUaW1lcixcbiAgICAgIGdsb2JhbFRpbWVyV2FpdGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgaWYgKGdhbWVTdGFydGVkID09PSBmYWxzZSl7XG4gICAgICAgICAgbG9hZGluZ0luZGljYXRvci5pbm5lckhUTUwgPSAnU3RpbGwgd2FpdGluZy4uLic7XG4gICAgICAgICAgZ2xvYmFsVGltZXJXYWl0aW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYgKGdhbWVTdGFydGVkID09PSBmYWxzZSl7XG4gICAgICAgICAgICAgIGxvYWRpbmdJbmRpY2F0b3IuaW5uZXJIVE1MID0gJ0xvb2tzIGxpa2Ugbm9ib2R5XFwncyBhcm91bmQuLi4nO1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgZ2FtZUZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgfSwgZ2V0UmFuZG9tSW50KDMwMCwgMzAwMCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIDQwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfSwgMTUwMDApO1xuXG4vLyAgdmFyIE5vdGlmaWNhdGlvbiA9IHdpbmRvdy5Ob3RpZmljYXRpb24gfHwgd2luZG93Lm1vek5vdGlmaWNhdGlvbiB8fCB3aW5kb3cud2Via2l0Tm90aWZpY2F0aW9uO1xuXG4gIGZ1bmN0aW9uIGNsZWFyVGV4dCh0ZXh0LCByZW1vdmVQdW5jdHVhdGlvbil7XG4gICAgdGV4dCA9IHRleHQudG9Mb3dlckNhc2UoKS50cmltKCkucmVwbGFjZSgvIC9nLCcnKTtcbiAgICBpZiAocmVtb3ZlUHVuY3R1YXRpb24gPT09IHRydWUpe1xuICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvWy4sPyFcXHMsXS9nLCAnJyk7XG4gICAgfVxuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cblxuZnVuY3Rpb24gY29udGFpbnNPZmZlbnNpdmVMYW5ndWFnZSh0ZXh0KXtcbiAgZm9yICh2YXIgaT0wLCBqPW9mZmVuc2l2ZVdvcmRzLmxlbmd0aDsgaTxqOyBpKyspe1xuICAgIGlmIChuZXcgUmVnRXhwKG9mZmVuc2l2ZVdvcmRzW2ldLCAnZ2knKS50ZXN0KHRleHQucmVwbGFjZSgvXFxXL2csICcnKSkgPT09IHRydWUpe1xuICAgICAgYWRkTWVzc2FnZSgnc3lzdGVtJywgJ0VSUk9SJyk7ICAgICAgXG4gICAgICBhZGRNZXNzYWdlKCdzeXN0ZW0nLCAnVW5hYmxlIHRvIHNlbmQgbWVzc2FnZScpOyAgICAgIFxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuICBmdW5jdGlvbiBzaGFyZUNoYXRMb2coKXtcbiAgICBzaGFyZUNoYXRMb2dNb2R1bGUuc2VydmljZSA9IHNoYXJlVGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1zZXJ2aWNlJyk7XG5cbiAgICB2YXIgc2hhcmVUaXRsZSA9ICdQbGF5IERldGVjdGl2ZSwgYSBnYW1lIGJ5IEBmb3VydG9uZmlzaCc7XG4gICAgaWYgKHNoYXJlQ2hhdExvZ01vZHVsZS5zZXJ2aWNlICE9PSBudWxsICYmIHNoYXJlQ2hhdExvZ01vZHVsZS5zZXJ2aWNlID09PSAncmVkZGl0Jyl7XG4gICAgICBzaGFyZVRpdGxlID0gJ1tsb2ddIFRJVExFJztcbiAgICB9XG5cbiAgICBzaGFyZUNoYXRMb2dNb2R1bGUuc2hhcmVVcmwgPSBzaGFyZVRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdXJsJylcbiAgICAgIC5yZXBsYWNlKC9ERVNDUklQVElPTi8sICdEZXRlY3RpdmU6IEEgXCJyZXZlcnNlIFR1cmluZyB0ZXN0XCIgY2hhdCBnYW1lLicpXG4gICAgICAucmVwbGFjZSgvQ0hBVExPR1VSTC9naSwgJ2h0dHA6Ly9mb3VydG9uZmlzaC5jb20vZGV0ZWN0aXZlL2xvZz9pZD0nICsgc2hhcmVDaGF0TG9nTW9kdWxlLmNoYXRMb2dJZClcbiAgICAgIC5yZXBsYWNlKC9TSE9SVFRJVExFLywgc2hhcmVUaXRsZSk7XG5cblxuICAgIHNoYXJlQ2hhdExvZ01vZHVsZS5zdGF0dXMuaW5uZXJIVE1MID0gJyc7XG4gICAgd2luZG93Lm9wZW4oc2hhcmVDaGF0TG9nTW9kdWxlLnNoYXJlVXJsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc3RhcnRHbG9iYWxUaW1lcigpe1xuICAgIGNsZWFyVGltZW91dChnbG9iYWxUaW1lcik7XG4gICAgZ2xvYmFsVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICBwb2tlVGhlUm9ib3QoKTtcbiAgICB9LCBnZXRSYW5kb21JbnQoMzAwMDAsIDYwMDAwKSk7XG4gIH1cblxuICBmdW5jdGlvbiBsZXNzQ2xldmVyKHRleHQpe1xuICAgIGlmIChyb2JvdC51c2VMZXNzQ2xldmVyID09PSB0cnVlICYmIHRleHQgIT09ICcuLi4nKXtcbiAgICAgIHRleHQgPSB0ZXh0LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXihpICl8IGkgL2lnLFwiIEkgXCIpLnRyaW0oKTtcbiAgICAgIHZhciB0ZW1wID0gdGV4dC5yZXBsYWNlKC8oWy4/IV0pXFxzKig/PVtBLVpdKS8sIFwiJDF8XCIpLnNwbGl0KFwifFwiKTtcblxuICAgICAgaWYgKHRlbXAubGVuZ3RoID09PSAxKXtcbiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFwuJC8sIFwiXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZ2V0UmFuZG9tSW50KDEsIDEwKSA9PT0gNSl7XG4gICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLygnKS9naSwgXCJcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3dpdGNoIChnZXRSYW5kb21JbnQoMSwgMTAwMDApKXtcbiAgICAgIGNhc2UgJzEnOlxuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKCdsbCcsICdsJyk7XG4gICAgICBicmVhaztcbiAgICAgIGNhc2UgJzInOlxuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKCdzcycsICdzJyk7XG4gICAgICBicmVhaztcbiAgICAgIGNhc2UgJzMnOlxuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKCdsJywgJ2snKTtcbiAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnNCc6XG4gICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoJ28nLCAncCcpO1xuICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc0JzpcbiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgndycsICdzJyk7XG4gICAgICBicmVhaztcbiAgICAgIGNhc2UgJzUnOlxuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKCdzJywgJ2QnKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tSb2xlKG1lc3NhZ2Upe1xuXG4gIH1cblxuXG4gIGZ1bmN0aW9uIHNob3dTaGFyaW5nQnV0dG9ucygpe1xuICAgIHNoYXJlQ2hhdExvZ1dyYXBwZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgLy9UT0RPOiBUaGlzIHNob3VsZCBiZSBhIGZ1bmN0aW9uLCBlZyByZW1vdmVDbGFzc1N0YWdnZXJlZChjbGFzcylcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3NoYXJlLWxpbmstc2hpZnRlZCcpLCBmdW5jdGlvbihlbCwgaW5kZXgpIHtcbiAgICAgIHNldFRpbWVvdXQoXG4gICAgICAgIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnc2hhcmUtbGluay1zaGlmdGVkJyk7XG4gICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnc2hhcmUtbGluay11bnNoaWZ0ZWQnKTtcbiAgICAgICAgfSxcbiAgICAgICAgKCgxMCppbmRleCkpKmluZGV4KTtcbiAgICB9KTsgICAgXG4gIH1cblxuICBmdW5jdGlvbiBjb250YWN0VGhlUm9ib3QobWVzc2FnZSl7XG4gICAgaWYgKHJvYm90LmFscmVhZHlBbnN3ZXJlZC5pbmRleE9mKGNsZWFyVGV4dChtZXNzYWdlLCB0cnVlKSkgPT09IC0xKXtcbiAgICAgIGlmIChtZXNzYWdlICE9PSAnLi4uJyl7XG4gICAgICAgIHJvYm90LmFscmVhZHlBbnN3ZXJlZC5wdXNoKGNsZWFyVGV4dChtZXNzYWdlLCB0cnVlKSk7XG4gICAgICB9XG4gICAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAvLyBCYWNrZW5kIGRvZXNuJ3Qgc3VwcG9ydCBkYXRhIGluIEpTT04gZm9ybWF0LCBrZWVwaW5nIHRoaXMgaGVyZSBmb3IgZnV0dXJlLlxuICAvLyAgICByZXF1ZXN0Lm9wZW4oJ0dFVCcsICcvL3d3dy5ib3RsaWJyZS5jb20vcmVzdC9ib3RsaWJyZS9mb3JtLWNoYXQnICwgdHJ1ZSk7XG4gICAgICByZXF1ZXN0Lm9wZW4oJ0dFVCcsICcvL3d3dy5ib3RsaWJyZS5jb20vcmVzdC9ib3RsaWJyZS9mb3JtLWNoYXQ/aW5zdGFuY2U9JyArIHJvYm90LmlkICsgJyZhcHBsaWNhdGlvbj0xNTU1MjUwMzA0MTczMDA1OTUmbWVzc2FnZT0nICsgbWVzc2FnZSArIChyb2JvdC5jb252ZXJzYXRpb25JRCAhPT0gbnVsbCA/ICcmY29udmVyc2F0aW9uPScgKyByb2JvdC5jb252ZXJzYXRpb25JRCA6ICcnKSwgdHJ1ZSk7XG4gICAgICByZXF1ZXN0Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPj0gMjAwICYmIHJlcXVlc3Quc3RhdHVzIDwgNDAwKSB7XG4gICAgLy8gICAgSlNPTiBpcyBub3QgeWV0IHN1cHBvcnRlZCwgb25seSBYTUwuXG4gICAgLy8gICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICB2YXIgcmVzcCA9IHhtbFRvSlNPTihyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgaWYgKHJvYm90LmNvbnZlcnNhdGlvbklEID09PSBudWxsKXtcbiAgICAgICAgICAgIHJvYm90LmNvbnZlcnNhdGlvbklEID0gcmVzcC5fY29udmVyc2F0aW9uO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChyZXNwLm1lc3NhZ2UgPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICBwb2tlVGhlUm9ib3QoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAobmV3IFJlZ0V4cChiYWRXb3Jkcy5qb2luKFwifFwiKSkudGVzdChyZXNwLm1lc3NhZ2UpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAvLyBUaGUgcm9ib3QgaXMgc2F5aW5nIHNvbWV0aGluZyBvZmZlbnNpdmUsIGxldCdzIGFzayBoaW0gYWdhaW4hXG4gICAgICAgICAgICBjb250YWN0VGhlUm9ib3QobWVzc2FnZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICByb2JvdFJlc3BvbmQobGVzc0NsZXZlcihyZXNwLm1lc3NhZ2UpKTsgICAgICAgICAgICBcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coJ0VSUk9SJyk7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2cocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuICAgICAgICAgIC8vIGFsZXJ0KCdFUlJPUjogJyArIHJlcXVlc3QucmVzcG9uc2VUZXh0ICsgJ1xcblxcblBsZWFzZSBjb250YWN0IHN0ZWZhbkBmb3VydG9uZmlzaC5jb20uXFxuXFxuVGhhbmtzIScpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy9UT0RPOiBUaGVyZSB3YXMgYSBjb25uZWN0aW9uIGVycm9yIG9mIHNvbWUgc29ydFxuICAgICAgfTtcbiAgLy8gQmFja2VuZCBkb2Vzbid0IHN1cHBvcnQgZGF0YSBpbiBKU09OIGZvcm1hdCwga2VlcGluZyB0aGlzIGhlcmUgZm9yIGZ1dHVyZS5cbiAgLypcbiAgICAgIHZhciBwYXJhbWV0ZXJzID0ge1xuICAgICAgICBpbnN0YW5jZTogcm9ib3QuaWQsXG4gICAgICAgIGFwcGxpY2F0aW9uOiAnMTU1NTI1MDMwNDE3MzAwNTk1JyxcbiAgICAgICAgbWVzc2FnZTogJ2hlbGxvJyAgICAgIFxuICAgICAgfTtcblxuICAgICAgaWYgKHJvYm90LmNvbnZlcnNhdGlvbklEICE9PSBudWxsKXtcbiAgICAgICAgcGFyYW1ldGVyc1snY29udmVyc2F0aW9uJ10gPSByb2JvdC5jb252ZXJzYXRpb25JRDtcbiAgICAgIH1cblxuICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIpO1xuICAgICAgcmVxdWVzdC5zZW5kKEpTT04uc3RyaW5naWZ5KHBhcmFtZXRlcnMpKTtcbiAgKi8gICAgXG4gICAgICByZXF1ZXN0LnNlbmQoKTtcblxuICAgIH1cbiAgICBlbHNle1xuICAgICAgaWYgKG1lc3NhZ2UuaW5kZXhPZignPycpID4gLTEpe1xuICAgICAgICBpZiAocm9ib3QuYWxyZWFkeUFuc3dlcmVkUmVzcG9uc2VzLmxlbmd0aCA+IDApe1xuICAgICAgICAgIHZhciBhbm5veWVkTWVzc2FnZSA9IHJvYm90LmFscmVhZHlBbnN3ZXJlZFJlc3BvbnNlcy5zcGxpY2UoZ2V0UmFuZG9tSW50KDAsIHJvYm90LmFscmVhZHlBbnN3ZXJlZFJlc3BvbnNlcy5sZW5ndGggLSAxKSwgMSk7XG4gICAgICAgICAgYW5ub3llZE1lc3NhZ2UgPSBhbm5veWVkTWVzc2FnZVswXTtcbiAgICAgICAgICByb2JvdFJlc3BvbmQobGVzc0NsZXZlcihhbm5veWVkTWVzc2FnZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgcm9ib3RSZXNwb25kKCcuLi4nKTsgXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwb2tlVGhlUm9ib3QoKXtcbiAgICB2YXIgc2VuZFRleHQgPSBbXG4gICAgICAgICAgXCIuLi5cIlxuICAgICAgICBdO1xuICAgIGNvbnRhY3RUaGVSb2JvdChzZW5kVGV4dFtnZXRSYW5kb21JbnQoMCwgc2VuZFRleHQubGVuZ3RoIC0gMSldKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJvYm90UmVzcG9uZChtZXNzYWdlKXtcbiAgICBtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKC8oUm9ib3ROb3RJbXBvc3RvcihcXGQpKnxKZW5ueXxsaW5oIHRydW9uZ3xBbGljZSkvZ2ksIHJvYm90Lm5hbWUpO1xuICAgIG1lc3NhZ2UgPSBtZXNzYWdlLnJlcGxhY2UoL1JPQk9URlJPTS9naSwgcm9ib3QuZnJvbSk7XG4gICAgcm9ib3QucGVuZGluZ1Jlc3BvbnNlcy5wdXNoKG1lc3NhZ2UpO1xuXG4gICAgY29uc29sZS5sb2coIHJvYm90LnBlbmRpbmdSZXNwb25zZXMubGVuZ3RoICk7XG4gICAgXG4gICAgaWYgKHJvYm90LnBlbmRpbmdSZXNwb25zZXMubGVuZ3RoID4gMCl7XG4gICAgICB2YXIgbmV4dE1lc3NhZ2UgPSByb2JvdC5wZW5kaW5nUmVzcG9uc2VzLnNoaWZ0KCksXG4gICAgICAgICAgbmV4dE1lc3NhZ2VMZW5ndGggPSBuZXh0TWVzc2FnZS5sZW5ndGgsXG4gICAgICAgICAgbmV4dE1lc3NhZ2VEZWxheSA9IChuZXh0TWVzc2FnZUxlbmd0aCAqIGdldFJhbmRvbUludCg1MCwgMTAwKSkgKyBnZXRSYW5kb21JbnQoMjAwMCwgODAwMCk7XG4gICAgICBpZiAocm9ib3QucmVzcG9uc2VQZW5kaW5nID09PSBmYWxzZSl7XG4gICAgICAgIHJvYm90LnJlc3BvbnNlUGVuZGluZyA9IHRydWU7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICBhZGRNZXNzYWdlKCdyb2JvdCcsIG1lc3NhZ2UpO1xuICAgICAgICAgIHJvYm90LnJlc3BvbnNlUGVuZGluZyA9IGZhbHNlO1xuICAgICAgICB9LCBuZXh0TWVzc2FnZURlbGF5KTtcbiAgICAgIH1cbiAgICAgIGVsc2V7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uKG1lc3NhZ2Upe1xuICAgICAgICAgICAgcm9ib3RSZXNwb25kKG1lc3NhZ2UpOyAgICAgICAgICAgIFxuICAgICAgICAgIH0pKG1lc3NhZ2UpO1xuICAgICAgICB9LCAxMDAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlYWxJbXBvc3RvcihkZXRlY3RpdmVHdWVzcyl7XG4gICAgaWYgKHBhcnRuZXJSb2xlICE9PSAndW5rbm93bicpe1xuICAgICAgZ2FtZUZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIGlmIChkZXRlY3RpdmVHdWVzcyA9PT0gcGFydG5lclJvbGUpe1xuICAgICAgICBhZGRNZXNzYWdlKCdzeXN0ZW0nLCAnQ09SUkVDVCcpO1xuICAgICAgICBnbG9iYWxTb2NrZXQuZW1pdCgnZ2FtZSBvdmVyJywgJ2RldGVjdGl2ZSB3b24nKTtcbiAgICAgICAgZ2xvYmFsU29ja2V0LmVtaXQoJ0kgd29uJywgJ2RldGVjdGl2ZScpOyAgICAgICAgXG4gICAgICB9XG4gICAgICBlbHNle1xuICAgICAgICBhZGRNZXNzYWdlKCdzeXN0ZW0nLCAnSU5DT1JSRUNUJyk7XG4gICAgICAgIGdsb2JhbFNvY2tldC5lbWl0KCdnYW1lIG92ZXInLCAnZGV0ZWN0aXZlIGxvc3QnKTtcbiAgICAgICAgZ2xvYmFsU29ja2V0LmVtaXQoJ0kgbG9zdCcsICdkZXRlY3RpdmUnKTsgICAgICAgIFxuICAgICAgfVxuICAgICAgYWRkTWVzc2FnZSgnc3lzdGVtJywgJ0dhbWUgaXMgb3ZlcicpO1xuICAgICAgc2hvd1NoYXJpbmdCdXR0b25zKCk7XG4gICAgfVxuICAgIGVsc2V7XG4gICAgICBhZGRNZXNzYWdlKCdzeXN0ZW0nLCAnRVJST1InKTtcbiAgICAgIGFkZE1lc3NhZ2UoJ3N5c3RlbScsICdUb28gZWFybHkgdG8gdGVsbCcpO1xuICAgIH1cbiAgICAvL1RPRE86IEltcGxlbWVudCBzY29yaW5nIHN5c3RlbS5cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZE1lc3NhZ2UobWVzc2FnZUZyb20sIG1lc3NhZ2VUZXh0KXtcbiAgICBpZiAobWVzc2FnZVRleHQudHJpbSgpLmxlbmd0aCA9PT0gMCl7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBuZXdNZXNzYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkxJXCIpO1xuICAgIHN3aXRjaCAobWVzc2FnZUZyb20pe1xuICAgICAgY2FzZSAndXNlcic6XG4gICAgICAgIG5ld01lc3NhZ2UuY2xhc3NMaXN0LmFkZCgndXNlci1tZXNzYWdlJyk7XG4gICAgICAgIG5ld01lc3NhZ2UuY2xhc3NMaXN0LmFkZCgnbmV3LW1lc3NhZ2UnKTtcbiAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3lzdGVtJzpcbiAgICAgICAgbmV3TWVzc2FnZS5jbGFzc0xpc3QuYWRkKCdzeXN0ZW0tbWVzc2FnZScpO1xuICAgICAgICBzd2l0Y2ggKG1lc3NhZ2VUZXh0KXtcbiAgICAgICAgICBjYXNlICdFUlJPUic6XG4gICAgICAgICAgY2FzZSAnSU5DT1JSRUNUJzpcbiAgICAgICAgICAgIG5ld01lc3NhZ2UuY2xhc3NMaXN0LmFkZCgnZXJyb3ItbWVzc2FnZScpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0NPUlJFQ1QnOlxuICAgICAgICAgICAgbmV3TWVzc2FnZS5jbGFzc0xpc3QuYWRkKCd1c2VyLWNvcnJlY3QnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgbmV3TWVzc2FnZS5jbGFzc0xpc3QuYWRkKCduZXctbWVzc2FnZScpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JvYm90JzpcbiAgICAgIGNhc2UgJ2ltcG9zdG9yJzpcbiAgICAgICAgbmV3TWVzc2FnZS5jbGFzc0xpc3QuYWRkKCdyb3JpLW1lc3NhZ2UnKTtcbiAgICAgICAgbmV3TWVzc2FnZS5jbGFzc0xpc3QuYWRkKCduZXctbWVzc2FnZScpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLypcbiAgICAgIEZ1biBzdHVmZiAtLSBwYXJ0IG9uZSEgI2Vhc3RlcmVnZ3NcbiAgICAqL1xuXG4gICAgdmFyIGZ1blN0dWZmID0gY2xlYXJUZXh0KG1lc3NhZ2VUZXh0LCB0cnVlKTtcblxuICAgIGlmIChmdW5TdHVmZi5pbmRleE9mKCd3aWdnbGUnKSA+IC0xKXtcbiAgICAgIG5ld01lc3NhZ2UuY2xhc3NMaXN0LmFkZCgnd2lnZ2xlLW1lc3NhZ2UnKTsgICAgICAgIFxuICAgIH1cblxuICAgIGlmIChmdW5TdHVmZi5pbmRleE9mKCdqdW1wJykgPiAtMSl7XG4gICAgICBuZXdNZXNzYWdlLmNsYXNzTGlzdC5hZGQoJ2p1bXAtbWVzc2FnZScpOyAgICAgICAgXG4gICAgfVxuXG4gICAgbmV3TWVzc2FnZS5pbm5lckhUTUwgPSBtZXNzYWdlVGV4dC5yZXBsYWNlKC8oPChbXj5dKyk+KS9pZyxcIlwiKTtcbiAgICAvL1RPRE86IFJld3JpdGUgdGhpcyFcblxuICAgIGlmIChtZXNzYWdlRnJvbSAhPT0gJ3VzZXInICYmIG1lc3NhZ2VGcm9tICE9PSAnc3lzdGVtJyl7XG4gICAgICBuZXdNZXNzYWdlLmlubmVySFRNTCA9ICc8c3BhbiBjbGFzcz1cIm1lc3NhZ2UtcHJlcGVuZFwiPj48L3NwYW4+ICcgKyBuZXdNZXNzYWdlLmlubmVySFRNTDtcbiAgICB9XG5cbiAgICBpZiAobWVzc2FnZVRleHQgPT09ICdHYW1lIGlzIG92ZXInICYmIG1lc3NhZ2VGcm9tID09PSAnc3lzdGVtJyl7XG4gICAgICBuZXdNZXNzYWdlLmlubmVySFRNTCArPSAnLiBGb2xsb3cgPGEgaHJlZj1cImh0dHBzOi8vdHdpdHRlci5jb20vZGV0ZWN0aXZlbG9nc1wiPkBkZXRlY3RpdmVsb2dzPC9hPiBmb3IgdXBkYXRlcyE8L3A+JztcbiAgICB9XG5cblxuICAgIGlmIChtZXNzYWdlRnJvbSA9PT0gJ3JvYm90JyAmJiBnYW1lRmluaXNoZWQgPT09IHRydWUpe1xuICAgICAgLy8gbnVsbFxuICAgIH1cbiAgICBlbHNle1xuICAgICAgbWVzc2FnZXMuYXBwZW5kQ2hpbGQobmV3TWVzc2FnZSk7XG5cbiAgICAgIC8qXG4gICAgICAgIEZ1biBzdHVmZiAtLSBwYXJ0IHR3byEgI2Vhc3RlcmVnZ3NcbiAgICAgICovXG4gICAgICBzd2l0Y2goY2xlYXJUZXh0KG1lc3NhZ2VUZXh0LCB0cnVlKSl7XG4gICAgICAgIGNhc2UgJ2lsaWtldGhpc2dhbWUnOlxuICAgICAgICAgIGFkZE1lc3NhZ2UoJ3N5c3RlbScsICdPaCBoZXksIHRoYW5rcyEnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2dvZG1vZGUnOlxuICAgICAgICAgIGFkZE1lc3NhZ2UoJ3N5c3RlbScsICdOb3QgaW4gdGhpcyBnYW1lLicpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIH1cbiAgICBpZiAobWVzc2FnZUZyb20gPT09ICd1c2VyJyl7XG4gICAgICBtZXNzYWdlVGV4dElucHV0LnZhbHVlID0gJyc7XG4gICAgfVxuICAgIGVsc2V7XG4gICAgICBpZiAoIWRvY3VtZW50Lmhhc0ZvY3VzKCkpe1xuICAgICAgICBkb2N1bWVudC50aXRsZSA9ICdOZXcgbWVzc2FnZSB8IERldGVjdGl2ZSBieSBAZm91cnRvbmZpc2gnO1xuICAgICAgfVxuICAgIH1cblxuICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wID0gZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQ7XG5cbiAgICB3aW5kb3cuc2Nyb2xsVG8oMCxkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCk7XG5cblxuICAgIG1lc3NhZ2VUZXh0ID0gY2xlYXJUZXh0KG1lc3NhZ2VUZXh0LCBmYWxzZSk7XG5cblxuICAgIGlmIChtZXNzYWdlRnJvbSA9PT0gJ3VzZXInICYmIC95b3UuKnJlPy4qKGltcG9zdG9yfGltcG9zdGVyfHJvYm90fGJvdCkvZ2kudGVzdChtZXNzYWdlVGV4dCkgJiYgdXNlclJvbGUgPT09ICdkZXRlY3RpdmUnICYmIGdhbWVGaW5pc2hlZCA9PT0gZmFsc2UgJiYgbWVzc2FnZVRleHQuaW5kZXhPZignbm90JykgPT09IC0xKXtcblxuICAgICAgaWYgKG5ldyBSZWdFeHAoWyd5b3VhcmVhcm9ib3QnLFxuICAgICAgICAgICAgICAgICAgICAgICd5b3VcXCdyZWFyb2JvdCcsXG4gICAgICAgICAgICAgICAgICAgICAgJ3lvdWFyZXJvYm90JyxcbiAgICAgICAgICAgICAgICAgICAgICAneW91cmVyb2JvdCcsXG4gICAgICAgICAgICAgICAgICAgICAgJ3lvdXJlYXJvYm90JyxcbiAgICAgICAgICAgICAgICAgICAgICAneW91XFwncmVyb2JvdCcsXG4gICAgICAgICAgICAgICAgICAgICAgJ3lvdWFyZXRoZXJvYm90JyxcbiAgICAgICAgICAgICAgICAgICAgICAneW91XFwncmV0aGVyb2JvdCdcbiAgICAgICAgICAgICAgICAgICAgXS5qb2luKFwifFwiKSkudGVzdChtZXNzYWdlVGV4dCkgPT09IHRydWUpIHtcbiAgICAgICAgcmV2ZWFsSW1wb3N0b3IoJ3JvYm90Jyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChuZXcgUmVnRXhwKFsneW91YXJlYW5pbXBvc3RlcicsXG4gICAgICAgICAgICAgICAgICAgICAgJ3lvdWFyZWFuaW1wb3N0b3InLFxuICAgICAgICAgICAgICAgICAgICAgICd5b3VcXCdyZWFuaW1wb3N0ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICd5b3VcXCdyZWFuaW1wb3N0b3InLFxuICAgICAgICAgICAgICAgICAgICAgICd5b3VhcmVpbXBvc3RlcicsXG4gICAgICAgICAgICAgICAgICAgICAgJ3lvdWFyZWltcG9zdG9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAneW91XFwncmVpbXBvc3RlcicsXG4gICAgICAgICAgICAgICAgICAgICAgJ3lvdVxcJ3JlaW1wb3N0b3InLFxuICAgICAgICAgICAgICAgICAgICAgICd5b3VyZXRoZWltcG9zdGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAneW91cmV0aGVpbXBvc3RvcicsXG4gICAgICAgICAgICAgICAgICAgICAgJ3lvdXJlaW1wb3N0ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICd5b3VyZWltcG9zdG9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAneW91cmVhbmltcG9zdGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAneW91cmVhbmltcG9zdG9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAneW91YXJldGhlaW1wb3N0ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICd5b3VhcmV0aGVpbXBvc3RvcicsXG4gICAgICAgICAgICAgICAgICAgICAgJ3lvdVxcJ3JldGhlaW1wb3N0ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICd5b3VcXCdyZXRoZWltcG9zdG9yJ1xuICAgICAgICAgICAgICAgICAgICBdLmpvaW4oXCJ8XCIpKS50ZXN0KG1lc3NhZ2VUZXh0KSA9PT0gdHJ1ZSkge1xuICAgICAgIHJldmVhbEltcG9zdG9yKCdpbXBvc3RvcicpO1xuICAgICAgfSBcbiAgICAgIGVsc2V7XG4gICAgICAgIGFkZE1lc3NhZ2UoJ3N5c3RlbScsICdQbGVhc2Ugc2F5IFwiWW91IGFyZSBhIHJvYm90XCIgb3IgXCJZb3UgYXJlIGFuIGltcG9zdG9yXCIuJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCBmdW5jdGlvbihldmVudCkge1xuICAgIGlmICh1c2VyUm9sZSAhPT0gdW5kZWZpbmVkKXtcbiAgICAgIGRvY3VtZW50LnRpdGxlID0gJ1lvdSBhcmUgdGhlICcgKyB1c2VyUm9sZSArICcgfCBEZXRlY3RpdmUgYnkgQGZvdXJ0b25maXNoJztcbiAgICB9XG4gIH0sIGZhbHNlKTtcblxuICB2YXIgc29ja2V0O1xuXG4gIGlmIChwcm9kdWN0aW9uU2VydmVyKCkpe1xuICAgIHNvY2tldCA9IGlvKGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sICsgJy8vZm91cnRvbmZpc2guY29tL2RldGVjdGl2ZScpO1xuICB9XG4gIGVsc2V7XG4gICAgc29ja2V0ID0gaW8oZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgZG9jdW1lbnQubG9jYXRpb24uaG9zdCk7XG4gIH1cblxuICBpZiAoZGlzbWlzc0luc3RydWN0aW9uc0J1dHRvbil7XG4gICAgZGlzbWlzc0luc3RydWN0aW9uc0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICBpZiAocGFydG5lclJvbGUgPT09ICdyb2JvdCcpe1xuICAgICAgICByZXN0YXJ0R2xvYmFsVGltZXIoKTtcbiAgICAgIH1cbiAgICAgIGluc3RydWN0aW9uc1dyYXBwZXIuY2xhc3NMaXN0LmFkZCgnc2hpZnRlZFVwJyk7XG4gICAgICBtZXNzYWdlRm9ybS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICAgIG1vcmVJbmZvLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgbW9yZUluZm8uY2xhc3NMaXN0LnJlbW92ZSgnc2hpZnRlZCcpO1xuICAgICAgbWVzc2FnZVRleHRJbnB1dC5mb2N1cygpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gaWYgKHJlcXVlc3ROb3RpZmljYXRpb25QZXJtaXNzaW9uKXtcbiAgLy8gICByZXF1ZXN0Tm90aWZpY2F0aW9uUGVybWlzc2lvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gIC8vICAgICBOb3RpZmljYXRpb24ucmVxdWVzdFBlcm1pc3Npb24oZnVuY3Rpb24gKHBlcm1pc3Npb24pIHtcbiAgLy8gICAgIGNvbnNvbGUubG9nKHBlcm1pc3Npb24pO1xuICAvLyAgICAgfSk7XG4gIC8vICAgfSk7XG4gIC8vIH1cblxuICBpZiAoc2hhcmVDaGF0TG9nTW9kdWxlLnRyaWdnZXJFbCl7XG4gICAgc2hhcmVDaGF0TG9nTW9kdWxlLnRyaWdnZXJFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2KXtcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBzaGFyZVRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGV2KTtcblxuICAgICAgc3dpdGNoIChzaGFyZVRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdXJsJykpe1xuICAgICAgICBjYXNlICdSRUxPQUQnOlxuICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoc2hhcmVDaGF0TG9nTW9kdWxlLnNoYXJlVXJsID09PSBudWxsKXtcbiAgICAgICAgICAgIHNoYXJlQ2hhdExvZ01vZHVsZS5zdGF0dXMuaW5uZXJIVE1MID0gJ0xvYWRpbmcuLi4nO1xuICAgICAgICAgICAgZ2xvYmFsU29ja2V0LmVtaXQoJ3NhdmVfY2hhdF9sb2cnLCBtZXNzYWdlc1dyYXBwZXIuaW5uZXJIVE1MLCB1c2VyUm9sZSk7ICAgICBcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIHNoYXJlQ2hhdExvZygpO1xuICAgICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAoc2hpZnRlZEVsczEubGVuZ3RoID4gMCl7XG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChzaGlmdGVkRWxzMSwgZnVuY3Rpb24oZWwsIGluZGV4KSB7XG4gICAgICBzZXRUaW1lb3V0KFxuICAgICAgICBmdW5jdGlvbigpe1xuICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ3NoaWZ0ZWQtMScpO1xuICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ3Vuc2hpZnRlZC0xJyk7XG4gICAgICAgIH0sXG4gICAgICAgICgyMDAtKDEwKmluZGV4KSkqaW5kZXgpO1xuICAgIH0pO1xuICB9ICBcblxuICBzb2NrZXQub24oJ2Nvbm5lY3RlZCcsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBnbG9iYWxTb2NrZXQgPSBzb2NrZXQ7XG4gIH0pO1xuXG4gIHNvY2tldC5vbignY2hhdF9sb2dfc2F2ZWQnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgc2hhcmVDaGF0TG9nTW9kdWxlLmNoYXRMb2dJZCA9IGRhdGE7XG4gICAgc2hhcmVDaGF0TG9nKCk7XG4gIH0pO1xuXG4gIHNvY2tldC5vbignZXJyb3InLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgY29uc29sZS5sb2coJ0VSUk9SJyk7XG4gICAgY29uc29sZS5sb2coZGF0YSk7XG4gIH0pO1xuXG4gIHNvY2tldC5vbignZ2FtZSBvdmVyJywgZnVuY3Rpb24oc3RhdHVzKSB7XG4gICAgaWYgKHN0YXR1cyA9PT0gJ2RldGVjdGl2ZSB3b24nKXtcbiAgICAgIGFkZE1lc3NhZ2UoJ3N5c3RlbScsICdZT1UgSEFWRSBCRUVOIFJFVkVBTEVEJyk7XG4gICAgICBnbG9iYWxTb2NrZXQuZW1pdCgnSSBsb3N0JywgJ2ltcG9zdG9yJyk7XG4gICAgfVxuICAgIGVsc2V7XG4gICAgICBhZGRNZXNzYWdlKCdzeXN0ZW0nLCAnWU9VIEZPT0xFRCBUSEUgREVURUNUSVZFJyk7ICAgICAgXG4gICAgICBnbG9iYWxTb2NrZXQuZW1pdCgnSSB3b24nLCAnaW1wb3N0b3InKTtcbiAgICB9XG4gICAgYWRkTWVzc2FnZSgnc3lzdGVtJywgJ0dhbWUgaXMgb3ZlcicpO1xuICAgIHNob3dTaGFyaW5nQnV0dG9ucygpO1xuICB9KTtcblxuICBzb2NrZXQub24oJ3BhcnRuZXIgZGlzY29ubmVjdGVkJywgZnVuY3Rpb24oZGF0YSkge1xuICAgIGFkZE1lc3NhZ2UoJ3N5c3RlbScsICdQYXJ0bmVyIGRpc2Nvbm5lY3RlZC4nKTtcbiAgICBzaG93U2hhcmluZ0J1dHRvbnMoKTtcblxuICAgIGlmIChkYXRhID09PSAncGluZyB0aW1lb3V0Jyl7XG4gICAgICAvL1RPRE86IFdhcyB0aGlzIGEgYm90P1xuICAgIH1cbiAgICBpZiAocGFydG5lclJvbGUgIT09ICd1bmtub3duJyAmJiB1c2VyUm9sZSA9PT0gJ2RldGVjdGl2ZScgJiYgZ2FtZUZpbmlzaGVkID09PSBmYWxzZSl7XG4gICAgICBhZGRNZXNzYWdlKCdzeXN0ZW0nLCAnWW91IHdlcmUgc3BlYWtpbmcgd2l0aCB0aGUgJyArIHBhcnRuZXJSb2xlLnRvVXBwZXJDYXNlKCkgKyAnLicpO1xuICAgIH1cbiAgfSk7XG5cbiAgc29ja2V0Lm9uKCd5b3UgYXJlJywgZnVuY3Rpb24oZGF0YSkge1xuICAgIGdhbWVTdGFydGVkID0gdHJ1ZTtcbiAgICBjbGVhclRpbWVvdXQoZ2xvYmFsVGltZXJXYWl0aW5nKTtcbiAgICB1c2VyUm9sZSA9IGRhdGE7XG4gICAgbG9hZGluZ0luZGljYXRvci5jbGFzc0xpc3QuYWRkKCdzaGlmdGVkVXAnKTtcbiAgICB2YXIgdW5zaGlmdGVkRWxzMSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Vuc2hpZnRlZC0xJylcblxuICAgIGlmICh1bnNoaWZ0ZWRFbHMxLmxlbmd0aCA+IDApe1xuICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbCh1bnNoaWZ0ZWRFbHMxLCBmdW5jdGlvbihlbCwgaW5kZXgpIHtcbiAgICAgICAgc2V0VGltZW91dChcbiAgICAgICAgICBmdW5jdGlvbigpe1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgndW5zaGlmdGVkLTEnKTtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ3NoaWZ0ZWRVcDEnKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgICgyMDAtKDEwKmluZGV4KSkqaW5kZXgpO1xuICAgICAgfSk7XG4gICAgfVxuXG5cblxuICAgIGlmIChzaGlmdGVkRWxzLmxlbmd0aCA+IDApe1xuICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChzaGlmdGVkRWxzLCBmdW5jdGlvbihlbCwgaW5kZXgpIHtcbiAgICAgICAgc2V0VGltZW91dChcbiAgICAgICAgICBmdW5jdGlvbigpe1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnc2hpZnRlZCcpO1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgndW5zaGlmdGVkJyk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAoMjAwLSgxMCppbmRleCkpKmluZGV4KTtcbiAgICAgIH0pO1xuICAgIH1cbi8vICAgIHdoYXRJc1RoaXNMaW5rLmNsYXNzTGlzdC5hZGQoJ3NoaWZ0ZWRVcCcpO1xuICAgIGRpc21pc3NJbnN0cnVjdGlvbnNCdXR0b24uZm9jdXMoKTtcbiAgICBkb2N1bWVudC50aXRsZSA9ICdZb3UgYXJlIHRoZSAnICsgdXNlclJvbGUgKyAnIHwgRGV0ZWN0aXZlIGJ5IEBmb3VydG9uZmlzaCc7XG4gICAgcm9sZVJlbWluZGVyLmlubmVySFRNTCA9ICd0aGUgPHNwYW4gY2xhc3M9XCJoaWdobGlnaHRcIj4nICsgdXNlclJvbGUgKyAnPC9zcGFuPic7XG4gICAgeW91QXJlLmlubmVySFRNTCA9ICdZb3UgYXJlIHRoZSA8c3BhbiBjbGFzcz1cImhpZ2hsaWdodFwiPicgKyB1c2VyUm9sZSArICc8L3NwYW4+JztcbiAgICBpZiAodXNlclJvbGUgPT09ICdkZXRlY3RpdmUnKXtcbiAgICAgIGluc3RydWN0aW9ucy5pbm5lckhUTUwgPSAnPHA+WW91IG11c3QgZmlndXJlIG91dCB3aGV0aGVyIHlvdSBhcmUgc3BlYWtpbmcgdG8gYSA8c3BhbiBjbGFzcz1cImhpZ2hsaWdodFwiPlJPQk9UPC9zcGFuPiogb3IgYW4gPHNwYW4gY2xhc3M9XCJoaWdobGlnaHRcIj5JTVBPU1RPUjwvc3Bhbj4sIGFub3RoZXIgcGxheWVyIHByZXRlbmRpbmcgdG8gYmUgYSA8c3BhbiBjbGFzcz1cImhpZ2hsaWdodFwiPlJPQk9UPC9zcGFuPiouPC9wPicgK1xuICAgICAgICAnPHA+U2F5IDxlbT5cIllvdSBhcmUgYW4gaW1wb3N0b3JcIjwvZW0+IG9yIDxlbT5cIllvdSBhcmUgYSByb2JvdFwiPC9lbT4gb25jZSB5b3UgYXJlIGNvbmZpZGVudCB3aXRoIHlvdXIgY2hvaWNlLjwvcD4nICtcbiAgICAgICAgJzxwIGNsYXNzPVwiZGVmaW5pdGlvblwiPipBIDxhIGhyZWY9XCJodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NoYXRib3RcIiB0YXJnZXQ9XCJfYmxhbmtcIj5jaGF0dGVyIHJvYm90PC9hPiBpcyBhIHR5cGUgb2YgY29udmVyc2F0aW9uYWwgYWdlbnQsIGEgY29tcHV0ZXIgcHJvZ3JhbSBkZXNpZ25lZCB0byBzaW11bGF0ZSBhbiBpbnRlbGxpZ2VudCBjb252ZXJzYXRpb24gd2l0aCBvbmUgb3IgbW9yZSBodW1hbiB1c2VycyB2aWEgYXVkaXRvcnkgb3IgdGV4dHVhbCBtZXRob2RzLjwvcD4nO1xuICAgIH1cbiAgICBlbHNle1xuICAgICAgaW5zdHJ1Y3Rpb25zLmlubmVySFRNTCA9ICc8cD5Zb3UgbXVzdCBjb252aW5jZSB0aGUgPHNwYW4gY2xhc3M9XCJoaWdobGlnaHRcIj5ERVRFQ1RJVkU8L3NwYW4+IHRoYXQgaGUgb3Igc2hlIGlzIHNwZWFraW5nIHRvIGEgPHNwYW4gY2xhc3M9XCJoaWdobGlnaHRcIj5ST0JPVDwvc3Bhbj4qLjwvcD4nICsgXG4gICAgICAnPHAgY2xhc3M9XCJkZWZpbml0aW9uXCI+KkEgPGEgaHJlZj1cImh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2hhdGJvdFwiIHRhcmdldD1cIl9ibGFua1wiPmNoYXR0ZXIgcm9ib3Q8L2E+IGlzIGEgdHlwZSBvZiBjb252ZXJzYXRpb25hbCBhZ2VudCwgYSBjb21wdXRlciBwcm9ncmFtIGRlc2lnbmVkIHRvIHNpbXVsYXRlIGFuIGludGVsbGlnZW50IGNvbnZlcnNhdGlvbiB3aXRoIG9uZSBvciBtb3JlIGh1bWFuIHVzZXJzIHZpYSBhdWRpdG9yeSBvciB0ZXh0dWFsIG1ldGhvZHMuPC9wPic7ICAgICAgXG4gICAgfVxuICB9KTtcblxuICBzb2NrZXQub24oJ3BhaXJlZCcsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBpZiAoZGF0YS51c2Vyc1swXSA9PT0gJ3JvYm90JyB8fCBkYXRhLnVzZXJzWzFdID09PSAncm9ib3QnKXtcbiAgICAgIHBhcnRuZXJSb2xlID0gJ3JvYm90JztcbiAgICAgIHNlbmRNZXNzYWdlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoY29udGFpbnNPZmZlbnNpdmVMYW5ndWFnZShjbGVhclRleHQobWVzc2FnZVRleHRJbnB1dC52YWx1ZSwgdHJ1ZSkpID09PSBmYWxzZSl7XG4gICAgICAgICAgcmVzdGFydEdsb2JhbFRpbWVyKCk7XG4gICAgICAgICAgaWYgKGdhbWVGaW5pc2hlZCA9PT0gZmFsc2Upe1xuICAgICAgICAgICAgY29udGFjdFRoZVJvYm90KG1lc3NhZ2VUZXh0SW5wdXQudmFsdWUpO1xuICAgICAgICAgICAgYWRkTWVzc2FnZSgndXNlcicsIG1lc3NhZ2VUZXh0SW5wdXQudmFsdWUpOyAgICAgICAgICBcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGFsZXJ0KCdMZXRcXCdzIGdpdmUgdGhlIHJvYm90IHNvbWUgcmVzdC4nKTtcbiAgICAgICAgICB9ICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZXtcbiAgICAgIHBhcnRuZXJSb2xlID0gKHVzZXJSb2xlID09PSAnZGV0ZWN0aXZlJyA/ICdpbXBvc3RvcicgOiAnZGV0ZWN0aXZlJyk7XG5cbiAgICAgIHNlbmRNZXNzYWdlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoY29udGFpbnNPZmZlbnNpdmVMYW5ndWFnZShjbGVhclRleHQobWVzc2FnZVRleHRJbnB1dC52YWx1ZSwgdHJ1ZSkpID09PSBmYWxzZSl7XG4gICAgICAgICAgc29ja2V0LmVtaXQoJ3NlbmQgbWVzc2FnZScsIHtcbiAgICAgICAgICAgICAgZnJvbTogdXNlclJvbGUsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VUZXh0SW5wdXQudmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICAgIGFkZE1lc3NhZ2UoJ3VzZXInLCBtZXNzYWdlVGV4dElucHV0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gIH0pO1xuXG4gIHNvY2tldC5vbignbWVzc2FnZSByZWNlaXZlZCcsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBpZiAocGFydG5lclJvbGUgPT09ICd1bmtub3duJyl7XG4gICAgICBwYXJ0bmVyUm9sZSA9IGRhdGEuZnJvbTtcbiAgICB9XG4gICAgaWYgKGRhdGEuZnJvbSAhPT0gdXNlclJvbGUpe1xuICAgICAgYWRkTWVzc2FnZShwYXJ0bmVyUm9sZSwgZGF0YS5tZXNzYWdlKTtcbiAgICB9XG4gIH0pO1xufSk7XG4iXX0=
