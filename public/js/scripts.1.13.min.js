"strict";function ready(e){"loading"!==document.readyState?e():document.addEventListener("DOMContentLoaded",e)}function productionServer(){return window.location.href.indexOf("fourtonfish.com")>-1}function removeClasses(e){e.className=""}function getEventTarget(e){return e=e||window.event,e.target||e.srcElement}function getRandomInt(e,t){return Math.floor(Math.random()*(t-e+1))+e}window.smoothScroll=function(){if(void 0!==document.querySelectorAll&&void 0!==window.pageYOffset&&void 0!==history.pushState){var e=function(e){return"HTML"===e.nodeName?-window.pageYOffset:e.getBoundingClientRect().top+window.pageYOffset},t=function(e){return.5>e?4*e*e*e:(e-1)*(2*e-2)*(2*e-2)+1},o=function(e,o,n,s){return n>s?o:e+(o-e)*t(n/s)},n=function(t,n,s){n=n||500;var a,r=window.pageYOffset;a="number"==typeof t?parseInt(t):e(t);var i=Date.now(),l=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||function(e){window.setTimeout(e,15)},d=function(){var e=Date.now()-i;window.scroll(0,o(r,a,e,n)),e>n?"function"==typeof s&&s(t):l(d)};d()},s=function(e){e.preventDefault(),n(document.getElementById(this.hash.substring(1)),500,function(){})};return document.addEventListener("DOMContentLoaded",function(){for(var e,t=document.querySelectorAll('a[href^="#"]'),o=t.length;e=t[--o];)e.addEventListener("click",s,!1)}),n}}();var xmlToJSON=function(e){var t=new X2JS,o=t.xml_str2json(e);return o=o.response},userRole,partnerRole="unknown",gameStarted=!1,gameFinished=!1;window.onbeforeunload=function(){return gameFinished===!1?"Are you sure?":void 0},ready(function(){function e(e,t){return e=e.toLowerCase().trim().replace(/ /g,""),t===!0&&(e=e.replace(/[.,?!\s,]/g,"")),e}function t(e){for(var t=0,o=Y.length;o>t;t++)if(new RegExp(Y[t],"gi").test(e.replace(/\W/g,""))===!0)return u("system","ERROR"),u("system","Unable to send message"),!0;return!1}function o(){B.service=c.getAttribute("data-service");var e="Play Detective, a game by @fourtonfish";null!==B.service&&"reddit"===B.service&&(e="[log] TITLE"),B.shareUrl=c.getAttribute("data-url").replace(/DESCRIPTION/,'Detective: A "reverse Turing test" chat game.').replace(/CHATLOGURL/gi,"http://fourtonfish.com/detective/log?id="+B.chatLogId).replace(/SHORTTITLE/,e),B.status.innerHTML="",window.open(B.shareUrl)}function n(){clearTimeout(g),g=setTimeout(function(){i()},getRandomInt(3e4,6e4))}function s(e){if(H.useLessClever===!0&&"..."!==e){e=e.toLowerCase().replace(/^(i )| i /gi," I ").trim();var t=e.replace(/([.?!])\s*(?=[A-Z])/,"$1|").split("|");1===t.length&&(e=e.replace(/\.$/,"")),5===getRandomInt(1,10)&&(e=e.replace(/(')/gi,""))}switch(getRandomInt(1,1e4)){case"1":e=e.replace("ll","l");break;case"2":e=e.replace("ss","s");break;case"3":e=e.replace("l","k");break;case"4":e=e.replace("o","p");break;case"4":e=e.replace("w","s");break;case"5":e=e.replace("s","d")}return e}function a(){C.style.display="block",Array.prototype.forEach.call(document.getElementsByClassName("share-link-shifted"),function(e,t){setTimeout(function(){e.classList.remove("share-link-shifted"),e.classList.add("share-link-unshifted")},10*t*t)})}function r(t){if(-1===H.alreadyAnswered.indexOf(e(t,!0))){"..."!==t&&H.alreadyAnswered.push(e(t,!0));var o=new XMLHttpRequest;o.open("GET","//www.botlibre.com/rest/botlibre/form-chat?instance="+H.id+"&application=155525030417300595&message="+t+(null!==H.conversationID?"&conversation="+H.conversationID:""),!0),o.onload=function(){if(o.status>=200&&o.status<400){var e=xmlToJSON(o.responseText);null===H.conversationID&&(H.conversationID=e._conversation),void 0===e.message?i():new RegExp(D.join("|")).test(e.message)===!0?r(t):l(s(e.message))}},o.onerror=function(){},o.send()}else if(t.indexOf("?")>-1)if(H.alreadyAnsweredResponses.length>0){var n=H.alreadyAnsweredResponses.splice(getRandomInt(0,H.alreadyAnsweredResponses.length-1),1);n=n[0],l(s(n))}else l("...")}function i(){var e=["..."];r(e[getRandomInt(0,e.length-1)])}function l(e){if(e=e.replace(/(RobotNotImpostor(\d)*|Jenny|linh truong|Alice)/gi,H.name),e=e.replace(/ROBOTFROM/gi,H.from),H.pendingResponses.push(e),console.log(H.pendingResponses.length),H.pendingResponses.length>0){var t=H.pendingResponses.shift(),o=t.length,n=o*getRandomInt(50,100)+getRandomInt(2e3,8e3);H.responsePending===!1?(H.responsePending=!0,setTimeout(function(){u("robot",e),H.responsePending=!1},n)):setTimeout(function(){return function(e){l(e)}(e)},1e3)}}function d(e){"unknown"!==partnerRole?(gameFinished=!0,e===partnerRole?(u("system","CORRECT"),m.emit("game over","detective won"),m.emit("I won","detective")):(u("system","INCORRECT"),m.emit("game over","detective lost"),m.emit("I lost","detective")),u("system","Game is over"),a()):(u("system","ERROR"),u("system","Too early to tell"))}function u(t,o){if(0===o.trim().length)return!1;var n=document.createElement("LI");switch(t){case"user":n.classList.add("user-message"),n.classList.add("new-message");break;case"system":switch(n.classList.add("system-message"),o){case"ERROR":case"INCORRECT":n.classList.add("error-message");break;case"CORRECT":n.classList.add("user-correct");break;default:n.classList.add("new-message")}break;case"robot":case"impostor":n.classList.add("rori-message"),n.classList.add("new-message")}var s=e(o,!0);if(s.indexOf("wiggle")>-1&&n.classList.add("wiggle-message"),s.indexOf("jump")>-1&&n.classList.add("jump-message"),n.innerHTML=o.replace(/(<([^>]+)>)/gi,""),"user"!==t&&"system"!==t&&(n.innerHTML='<span class="message-prepend">></span> '+n.innerHTML),"Game is over"===o&&"system"===t&&(n.innerHTML+='. Follow <a href="https://twitter.com/detectivelogs">@detectivelogs</a> for updates!</p>'),"robot"===t&&gameFinished===!0);else switch(O.appendChild(n),e(o,!0)){case"ilikethisgame":u("system","Oh hey, thanks!");break;case"godmode":u("system","Not in this game.")}"user"===t?k.value="":document.hasFocus()||(document.title="New message | Detective by @fourtonfish"),document.body.scrollTop=document.body.scrollHeight,window.scrollTo(0,document.body.scrollHeight),o=e(o,!1),"user"===t&&/you.*re?.*(impostor|imposter|robot|bot)/gi.test(o)&&"detective"===userRole&&gameFinished===!1&&-1===o.indexOf("not")&&(new RegExp(["youarearobot","you'rearobot","youarerobot","yourerobot","yourearobot","you'rerobot","youaretherobot","you'retherobot"].join("|")).test(o)===!0?d("robot"):new RegExp(["youareanimposter","youareanimpostor","you'reanimposter","you'reanimpostor","youareimposter","youareimpostor","you'reimposter","you'reimpostor","youretheimposter","youretheimpostor","youreimposter","youreimpostor","youreanimposter","youreanimpostor","youaretheimposter","youaretheimpostor","you'retheimposter","you'retheimpostor"].join("|")).test(o)===!0?d("impostor"):u("system",'Please say "You are a robot" or "You are an impostor".'))}var c,m,g,h=document.getElementsByClassName("shifted-1"),p=document.getElementsByClassName("shifted"),y=document.getElementById("loading"),f=document.getElementById("you-are"),v=document.getElementById("instructions-wrapper"),w=document.getElementById("instructions"),R=document.getElementById("dismiss-instructions"),b=document.getElementById("more-info"),L=document.getElementById("role-reminder"),E=document.getElementById("message-form"),I=document.getElementById("send-message"),k=document.getElementById("message-text"),T=document.getElementById("messages-wrapper"),O=document.getElementById("messages"),C=document.getElementById("share-chat-log-wrapper"),B=(document.getElementById("what-is-this"),{triggerEl:document.getElementById("share-buttons-game"),service:null,status:document.getElementById("chat-log-url-status"),shareUrl:null,chatLogId:null}),A=["909409"],M=["your mom","not your business","none of your business","Steve","Bob","Lucy","Rita","Cletus","Rufus","Gale","Sidney","Emmie","Ethyl","Babara","Jodie","Karon","Rashida","Olen","Felisa","Nenita","Camille","Shay","Phoebe","Angelique","Monte","Exie","Lucrecia","Melodi","Marge","Zoe","Cassandra","Rosaura","Brendon","Mckinley","Lucie","Shandi","Mao","Vilma","Shara","Giselle","Royal","Dia","Ivy","Sheridan","Kandi","Juliette","Camilla","Susanna","Gary","Gertha","Britany","Marvella","Sina","Lakeesha","Sherill","Toney","Sherri","Albertina","Taren","Hildred","Erma","Lenard","Tyson","Markus","Inez","Letty","Deedra","Tammera","Stanley","Lora","Leon","Belkis","Janae","Lenna","Bronwyn","Kimbery","Debi","Bernie","Alleen","Deloise","Chiquita","Shanelle","Wynona","Kisha","Minna","Laronda","Chaya","Anabel","Leila","Arletha","Loyce","Crysta","Maegan","Valery","Hee","Ed","Mitsuko","Vincenzo","Mercedez","Janeen","Fredrick","Sharda","Dylan","Cassi","Mae","Bobbye","Lanny"],S=["Uh, where are you from?","That's prvivate.","Your mom!","I live right next to you!","...","I'm homeless","I'm homeless?"],D=["beeyotch","biatch","bitch","chinaman","chinamen","chink","crip","cunt","dago","daygo","dego","dick","douchebag","dyke","fag","fatass","fatso","gash","gimp","golliwog","gook","gyp","homo","hooker","jap","kike","kraut","lame","lardass","lesbo","negro","nigga","nigger","paki","pickaninny","pussy","raghead","retard","shemale","skank","slut","spade","spic","spook","tard","tits","titt","trannies","tranny","twat","wetback","whore","wop"],H={id:A[getRandomInt(0,A.length-1)],name:M[getRandomInt(0,M.length-1)],from:S[getRandomInt(0,S.length-1)],conversationID:null,useLessClever:Math.random()<.5?!0:!1,responsePending:!1,pendingResponses:[],alreadyAnswered:[],alreadyAnsweredResponses:["You already asked that question.","You already asked me that.","I think I already told you.","I already told you.","I already answered that.","Did you read my answer?","You already said that.","...","I told you","I literally just told you.","I just told you."]},Y=["n(i|1)+g{2,}((e|3)+r+|a)+","f+a+g+","f+(a|@)+g{2,}(o|0)+t+"],x=setTimeout(function(){gameStarted===!1&&(y.innerHTML="Still waiting...",x=setTimeout(function(){gameStarted===!1&&(y.innerHTML="Looks like nobody's around...",setTimeout(function(){gameFinished=!0,location.reload()},getRandomInt(300,3e3)))},4e4))},15e3);window.addEventListener("focus",function(){void 0!==userRole&&(document.title="You are the "+userRole+" | Detective by @fourtonfish")},!1);var F;productionServer()?(F=io(document.location.protocol+"//fourtonfish.com/detective"),console.log(F)):F=io(document.location.protocol+"//"+document.location.host),R&&R.addEventListener("click",function(){"robot"===partnerRole&&n(),v.classList.add("shiftedUp"),E.classList.remove("hidden"),b.classList.remove("hidden"),b.classList.remove("shifted"),k.focus()}),B.triggerEl&&B.triggerEl.addEventListener("click",function(e){switch(e.preventDefault(),c=getEventTarget(e),c.getAttribute("data-url")){case"RELOAD":location.reload();break;default:null===B.shareUrl?(B.status.innerHTML="Loading...",m.emit("save_chat_log",T.innerHTML,userRole)):o()}}),h.length>0&&Array.prototype.forEach.call(h,function(e,t){setTimeout(function(){e.classList.remove("shifted-1"),e.classList.add("unshifted-1")},(200-10*t)*t)}),F.on("connected",function(){m=F}),F.on("chat_log_saved",function(e){B.chatLogId=e,o()}),F.on("error",function(e){console.log("ERROR"),console.log(e)}),F.on("game over",function(e){"detective won"===e?(u("system","YOU HAVE BEEN REVEALED"),m.emit("I lost","impostor")):(u("system","YOU FOOLED THE DETECTIVE"),m.emit("I won","impostor")),u("system","Game is over"),a()}),F.on("partner disconnected",function(e){u("system","Partner disconnected."),a(),"unknown"!==partnerRole&&"detective"===userRole&&gameFinished===!1&&u("system","You were speaking with the "+partnerRole.toUpperCase()+".")}),F.on("you are",function(e){gameStarted=!0,clearTimeout(x),userRole=e,y.classList.add("shiftedUp");var t=document.getElementsByClassName("unshifted-1");t.length>0&&Array.prototype.forEach.call(t,function(e,t){setTimeout(function(){e.classList.remove("unshifted-1"),e.classList.add("shiftedUp1")},(200-10*t)*t)}),p.length>0&&Array.prototype.forEach.call(p,function(e,t){setTimeout(function(){e.classList.remove("shifted"),e.classList.add("unshifted")},(200-10*t)*t)}),R.focus(),document.title="You are the "+userRole+" | Detective by @fourtonfish",L.innerHTML='the <span class="highlight">'+userRole+"</span>",f.innerHTML='You are the <span class="highlight">'+userRole+"</span>",w.innerHTML="detective"===userRole?'<p>You must figure out whether you are speaking to a <span class="highlight">ROBOT</span>* or an <span class="highlight">IMPOSTOR</span>, another player pretending to be a <span class="highlight">ROBOT</span>*.</p><p>Say <em>"You are an impostor"</em> or <em>"You are a robot"</em> once you are confident with your choice.</p><p class="definition">*A <a href="http://en.wikipedia.org/wiki/Chatbot" target="_blank">chatter robot</a> is a type of conversational agent, a computer program designed to simulate an intelligent conversation with one or more human users via auditory or textual methods.</p>':'<p>You must convince the <span class="highlight">DETECTIVE</span> that he or she is speaking to a <span class="highlight">ROBOT</span>*.</p><p class="definition">*A <a href="http://en.wikipedia.org/wiki/Chatbot" target="_blank">chatter robot</a> is a type of conversational agent, a computer program designed to simulate an intelligent conversation with one or more human users via auditory or textual methods.</p>'}),F.on("paired",function(o){"robot"===o.users[0]||"robot"===o.users[1]?(partnerRole="robot",I.addEventListener("click",function(o){o.preventDefault(),t(e(k.value,!0))===!1&&(n(),gameFinished===!1?(r(k.value),u("user",k.value)):alert("Let's give the robot some rest."))})):(partnerRole="detective"===userRole?"impostor":"detective",I.addEventListener("click",function(o){o.preventDefault(),t(e(k.value,!0))===!1&&(F.emit("send message",{from:userRole,message:k.value}),u("user",k.value))}))}),F.on("message received",function(e){"unknown"===partnerRole&&(partnerRole=e.from),e.from!==userRole&&u(partnerRole,e.message)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
